import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import { chat_id, root } from ".";
import prisma from "./module/prisma";
import { Accessed, Confirm_User_Success, Logger, Send_Message, User_Info } from "./module/helper";
import { abusivelist } from "./module/blacklist";
import { Account, Blank } from "@prisma/client";

export function commandUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
	hearManager.hear(/!—Å–ø—É—Ç–Ω–∏–∫|!–°–ø—É—Ç–Ω–∏–∫/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const user_inf = await User_Info(context)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
		const mail_check = await prisma.mail.findFirst({ where: {  blank_to: blank_check?.id ?? 0, read: false, find: true } })
		
        const keyboard = new KeyboardBuilder()
    	.textButton({ label: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', payload: { command: 'card_enter' }, color: 'secondary' }).row()
		.textButton({ label: `${mail_check ? 'üì¨' : 'üì™'} –ü–æ—á—Ç–∞`, payload: { command: 'card_enter' }, color: 'secondary' }).row()
    	//.textButton({ label: 'üîç –ò—Å–∫–∞—Ç—å –∫–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ—Ñ–∏–≥', payload: { command: 'inventory_enter' }, color: 'secondary' }).row()
		.textButton({ label: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
		.textButton({ label: '‚öô –¶–µ–Ω–∑—É—Ä–∞', payload: { command: 'shop_category_enter' }, color: 'negative' }).row()
    	//.textButton({ label: 'üåê –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ—Ä–Ω–æ', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
    	if (await Accessed(context) != `user`) {
    	    keyboard.textButton({ label: '‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è', payload: { command: 'admin_enter' }, color: 'secondary' })
    	}
    	//keyboard.urlButton({ label: '‚ö° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: `https://vk.com/@bank_mm-instrukciya-po-polzovaniu-botom-centrobanka-magomira` }).row()
    	keyboard.textButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
		await Send_Message(user_check.idvk, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${user_inf.first_name}, —á—Ç–æ –∏–∑–≤–æ–ª–∏—Ç–µ?`, keyboard)
        await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
    })
	//–ø–æ—á—Ç–∞
	hearManager.hear(/üì¨ –ü–æ—á—Ç–∞|üì™ –ü–æ—á—Ç–∞|!–ø–æ—á—Ç–∞/, async (context: any) => {
		if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check || !blank_check) { return }
		if (blank_check.banned) {
			await context.send(`–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const mail_build = []
		for (const mail of await prisma.mail.findMany({ where: { blank_to: blank_check.id, read: false, find: true } })) {
			mail_build.push(mail)
		}
		let ender = true
		await Logger(`(private chat) ~ starting check self mail by <user> ‚Ññ${context.senderId}`)
		while (ender && mail_build.length > 0) {
			const target = Math.floor(Math.random() * mail_build.length)
			const selector = mail_build[target]
			const blank_to_check = await prisma.blank.findFirst({ where: { id: selector.blank_to } })
			const blank_from_check = await prisma.blank.findFirst({ where: { id: selector.blank_from } })
			if (!blank_to_check || !blank_from_check) { 
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, find: false } })
				mail_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –ù–µ–¥–∞–≤–Ω–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check?.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–æ–ª–µ–≤–∏–∫—É —Å –∞–Ω–∫–µ—Ç–æ–π #${blank_from_check?.id}, –Ω–æ –≤–∞—à–∞ –∏–ª–∏ –æ–ø–æ–Ω–Ω–µ–Ω—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º\n `)
				continue
			}
			const account_to = await prisma.account.findFirst({ where: { id: blank_to_check.id_account } })
			const account_from = await prisma.account.findFirst({ where: { id: blank_from_check.id_account } })
			if (!account_to || !account_from) {
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, find: false } })
				mail_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –ù–µ–¥–∞–≤–Ω–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check?.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–æ–ª–µ–≤–∏–∫—É —Å –∞–Ω–∫–µ—Ç–æ–π #${blank_from_check?.id}, –Ω–æ –≤–∞c –∏–ª–∏ –æ–ø–æ–Ω–Ω–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º\n `)
				continue
			}
			let censored = blank_from_check.text
			if (user_check.censored) {
				censored.toLocaleLowerCase()
				for (const word of abusivelist) {
					//console.log(word)
					//console.log(re)
					censored = censored.replace(new RegExp( word.toLowerCase(), "g" ), `${'*'.repeat(word.length)}`)
					//console.log(filters)
				}
			}
			const corrected = await context.question(`üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–≤—Ç–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã:\n üìú –ê–Ω–∫–µ—Ç–∞: ${blank_from_check.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${censored}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: 'üëé', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: 'üëç', payload: { command: 'citizen' }, color: 'secondary' }).row()
					.textButton({ label: 'üö´–ù–∞–∑–∞–¥', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline()
				}
			)
			if (corrected.text == 'üö´–ù–∞–∑–∞–¥' || corrected.text == '!–Ω–∞–∑–∞–¥') {
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –∞–Ω–∫–µ—Ç.`)
				ender = false
			}
			if (corrected.text == 'üëé' || corrected.text == '!–¥–∏–∑–ª–∞–π–∫') {
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true } })
				mail_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É #${selector.blank_from} –ø–æ–ª–Ω–æ—Å—Ç—å—é.`)
				await Logger(`(private chat) ~ clicked unlike for <blank> #${blank_to_check.id} by <user> ‚Ññ${context.senderId}`)
			}
			if (corrected.text == 'üëç' || corrected.text == '!–ª–∞–π–∫') {
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, status: true } })
				mail_build.splice(target, 1)
				await Send_Message(account_to.idvk, `üîä –ù–µ–¥–∞–≤–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞ #${blank_from_check.id}, –∑–Ω–∞–π—Ç–µ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_to_check.id}.\n –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç–µ —Ñ–ª–µ—à–±–µ–∫–∏ –≤–º–µ—Å—Ç–µ, —Å—Ç–∞–Ω—å—Ç–µ –≤—Ä–∞–≥–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å https://vk.com/id${account_from.idvk} !`)
				await Send_Message(account_from.idvk, `üîä –ù–µ–¥–∞–≤–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞ #${blank_to_check.id}, –∑–Ω–∞–π—Ç–µ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_from_check.id}.\n –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç–µ —Ñ–ª–µ—à–±–µ–∫–∏ –≤–º–µ—Å—Ç–µ, —Å—Ç–∞–Ω—å—Ç–µ –≤—Ä–∞–≥–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å https://vk.com/id${account_to.idvk} !`)
        		await Logger(`(private chat) ~ clicked like for <blank> #${blank_to_check.id} by <user> ‚Ññ${context.senderId}`)
				const ans_selector = `üåê –ê–Ω–∫–µ—Ç—ã ‚Ññ${blank_from_check.id} + ‚Ññ${blank_to_check.id} = [—Ä–æ–ª–µ–≤–∏–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞]!`
    			await Send_Message(chat_id, ans_selector)
			}
		}
		if (mail_build.length == 0) { await Send_Message(user_check.idvk, `üòø –ü–∏—Å—å–º–∞ –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check self mail by <user> ‚Ññ${context.senderId}`)
    })
	//–¥–ª—è —Ä–∞–Ω–¥–æ–º–∞
	hearManager.hear(/üé≤ –†–∞–Ω–¥–æ–º|!—Ä–∞–Ω–¥–æ–º/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check) { return }
		if (!blank_check) { return await context.send(`–°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
		if (blank_check.banned) {
			await context.send(`–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const blank_build = []
		let counter = 0
		for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
			if (blank.id_account == user_check.id) { continue }
			const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
			if (vision_check) { continue }
			if (counter > 50) { break }
			blank_build.push(blank)
			counter++
		}
		let ender = true
		await Logger(`(private chat) ~ starting check random blank by <user> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector = blank_build[target]
			const blank_check = await prisma.blank.findFirst({ where: { id: selector.id } })
			if (!blank_check) { 
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—å—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `)
				continue
			}
			let censored = selector.text
			if (user_check.censored) {
				censored.toLocaleLowerCase()
				for (const word of abusivelist) {
					//console.log(word)
					//console.log(re)
					censored = censored.replace(new RegExp( word.toLowerCase(), "g" ), `${'*'.repeat(word.length)}`)
					//console.log(filters)
				}
			}
			const corrected = await context.question(`üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${censored}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '‚õî–ù–∞–ª–µ–≤–æ', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '‚úÖ–ù–∞–ø—Ä–∞–≤–æ', payload: { command: 'citizen' }, color: 'secondary' }).row()
					.textButton({ label: 'üö´–ù–∞–∑–∞–¥', payload: { command: 'citizen' }, color: 'secondary' }).row()
					.textButton({ label: `‚åõ–í –æ—á–µ—Ä–µ–¥–∏ [${blank_build.length}]`, payload: { command: 'citizen' }, color: 'secondary' }).row()
					.textButton({ label: '‚ö†–ñ–∞–ª–æ–±–∞', payload: { command: 'citizen' }, color: 'secondary' }).row()
					.oneTime().inline()
				}
			)
			if (corrected.text == 'üö´–ù–∞–∑–∞–¥' || corrected.text == '!–Ω–∞–∑–∞–¥') {
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∞–Ω–∫–µ—Ç.`)
				ender = false
			}
			if (corrected.text == '‚õî–ù–∞–ª–µ–≤–æ' || corrected.text == '!–Ω–∞–ª–µ–≤–æ') {
				const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É #${selector.id}.`)
				await Logger(`(private chat) ~ clicked unswipe for <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
			}
			if (corrected.text == '‚úÖ–ù–∞–ø—Ä–∞–≤–æ' || corrected.text == '!–Ω–∞–ø—Ä–∞–≤–æ') {
				const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${selector.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
				const user_nice = await prisma.account.findFirst({ where: { id: selector.id_account } })
				const user_blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
				const mail_set = await prisma.mail.create({ data: { blank_to: selector.id, blank_from: user_blank?.id ?? 0 }})
				if (mail_set) { await Send_Message(user_nice?.idvk ?? user_check.idvk, `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) }
				await Logger(`(private chat) ~ clicked swipe for <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
			}
			if (corrected.text == '‚ö†–ñ–∞–ª–æ–±–∞' || corrected.text == '!–∂–∞–ª–æ–±–∞') {

				const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `–≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É ‚Ññ${blank_check.id}?`)
    			await context.send(`${confirm.text}`)
    			if (!confirm.status) { continue; }
				let ender2 = true
				let text_input = ``
				await Logger(`(private chat) ~ starting report writing on <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
				while (ender2) {
					let censored = text_input
					if (user_check.censored) {
						censored.toLocaleLowerCase()
						for (const word of abusivelist) {
							//console.log(word)
							//console.log(re)
							censored = censored.replace(new RegExp( word.toLowerCase(), "g" ), `${'*'.repeat(word.length)}`)
							//console.log(filters)
						}
					}
					const corrected = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –æ—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù –£–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: ${censored}`,
						{	
							keyboard: Keyboard.builder()
							.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
							.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
							.oneTime().inline()
						}
					)
					if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
						if (text_input.length < 10) { await context.send(`–ñ–∞–ª–æ–±—É –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
						if (text_input.length > 200) { await context.send(`–ñ–∞–ª–æ–±—É –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
						const report_set = await prisma.report.create({ data: { id_blank: selector.id, id_account: user_check.id, text: text_input }})
						await Logger(`(private chat) ~ report send about <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
						await Send_Message(user_check.idvk, `‚úÖ –ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É #${selector.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–æ—Å!`)
						const user_warn = await prisma.account.findFirst({ where: { id: selector.id_account } })
						const counter_warn = await prisma.report.count({ where: { id_blank: selector.id } })
						if (!user_warn) { return }
						await Send_Message(user_warn.idvk, `‚úÖ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${selector.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã! –ñ–∞–ª–æ–± ${counter_warn}/3.`)
						if (counter_warn >= 3) {
							await prisma.blank.update({ where: { id: selector.id }, data: { banned: true } })
							await Send_Message(user_warn.idvk, `üö´ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${selector.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã ${counter_warn}/3. –ò–∑—ã–º–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.`)
						}
						const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
						blank_build.splice(target, 1)
						ender2 = false
					} else {
						if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
							ender2 = false
						} else {
							text_input = corrected.text.replace(/[^–∞-—è–ê-–Ø0-9—ë–Å -+‚Äî‚Äì(){}[#‚Ññ\]=:;.,!?...]/gi, '')
						}
					}
				}
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å !—Ä–∞–Ω–¥–æ–º –µ—â–µ —Ä–∞–∑, –∏–Ω–∞—á–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check random blank by <user> ‚Ññ${context.senderId}`)
    })
	// –¥–ª—è –∞–Ω–∫–µ—Ç—ã
	hearManager.hear(/üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞|!–∞–Ω–∫–µ—Ç–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
		if (!blank_check) {
			let ender = true
			let text_input = ``
			await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.senderId}`)
			while (ender) {
				let censored = text_input
				if (user_check.censored) {
					censored.toLocaleLowerCase()
					for (const word of abusivelist) {
						//console.log(word)
						//console.log(re)
						censored = censored.replace(new RegExp( word.toLowerCase(), "g" ), `${'*'.repeat(word.length)}`)
						//console.log(filters)
					}
				}
				const corrected = await context.question(`üß∑ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ—Ç 30 –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤: \n üí°–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ç—Ä–æ–∫, –∂–µ–ª–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã –∏–ª–∏ –∂–µ —Å—é–∂–µ—Ç... –¥—Ä—É–≥–∏–µ –Ω—é–∞–Ω—Å—ã.\nüìù –°–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${censored}`,
					{	
						keyboard: Keyboard.builder()
						.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
						.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
						.oneTime().inline()
					}
				)
				if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
					if (text_input.length < 30) { await context.send(`–ê–Ω–∫–µ—Ç—É –æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
					const save = await prisma.blank.create({ data: { text: text_input, id_account: user_check.id } })
					await context.send(`–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç–∫—É-–∫–æ–Ω—Ñ–µ—Ç–∫—É –ø–æ–¥ UID: ${save.id}`)
					ender = false
				} else {
					if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
						ender = false
					} else {
						text_input = corrected.text.replace(/[^–∞-—è–ê-–Ø0-9—ë–Å -+‚Äî‚Äì(){}[#‚Ññ\]=:;.,!?...]/gi, '')
					}
				}
			}
		} else {
			const blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
			await Logger(`(private chat) ~ starting self blank is viewed by <user> ‚Ññ${context.senderId}`)
			if (blank) {
				const keyboard = new KeyboardBuilder()
    			.textButton({ label: `‚õî–£–¥–∞–ª–∏—Ç—å ${blank.id}`, payload: { command: 'card_enter' }, color: 'secondary' }).row()
    			.textButton({ label: `‚úè–ò–∑–º–µ–Ω–∏—Ç—å ${blank.id}`, payload: { command: 'inventory_enter' }, color: 'secondary' }).row()
    			keyboard.textButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
				const count_vision = await prisma.vision.count({ where: { id_blank: blank.id } })
				const count_account = await prisma.account.count({})
				const count_success = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: true }})
				const count_ignore = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: false }})
				const count_wrong = await prisma.mail.count({ where: { blank_to: blank.id, read: true, find: false }})
				const count_unread = await prisma.mail.count({ where: { blank_to: blank.id, read: false }})
				const counter_warn = await prisma.report.count({ where: { id_blank: blank.id } })
				let censored = blank.text
				if (user_check.censored) {
					censored.toLocaleLowerCase()
					for (const word of abusivelist) {
						//console.log(word)
						//console.log(re)
						censored = censored.replace(new RegExp( word.toLowerCase(), "g" ), `${'*'.repeat(word.length)}`)
						//console.log(filters)
					}
				}
				await Send_Message(user_check.idvk, `üìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${censored}\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${count_vision}/${count_account}\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${counter_warn}/3\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${count_success}\nüö´ –ò–≥–Ω–æ—Ä–æ–≤: ${count_ignore}\n‚åõ –û–∂–∏–¥–∞–µ—Ç: ${count_unread}\n‚ùó –ü–æ—Ç–µ—Ä—è—à–µ–∫: ${count_wrong}`, keyboard)
			}
		}
        await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.senderId}`)
    })
	hearManager.hear(/‚õî–£–¥–∞–ª–∏—Ç—å|!—É–¥–∞–ª–∏—Ç—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const [cmd, value] = context.text.split(' ');
        const target = parseInt(value)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id, id: target } })
		if (!blank_check) { return }
		if (blank_check.banned) {
			await context.send(`–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Ññ${blank_check.id}?`)
    	await context.send(`${confirm.text}`)
    	if (!confirm.status) { return; }
		const blank_delete = await prisma.blank.delete({ where: { id: blank_check.id } })
        if (blank_delete) { 
			await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_delete.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${blank_delete.text}`)
			await Logger(`(private chat) ~ deleted self <blank> #${blank_delete.id} by <user> ‚Ññ${context.senderId}`)
		}
    })
	hearManager.hear(/‚úè–ò–∑–º–µ–Ω–∏—Ç—å|!–∏–∑–º–µ–Ω–∏—Ç—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const [cmd, value] = context.text.split(' ');
        const target = parseInt(value)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id, id: target } })
		if (!blank_check) { return }
		if (blank_check.banned) {
			await context.send(`–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Ññ${blank_check.id}?`)
    	await context.send(`${confirm.text}`)
    	if (!confirm.status) { return; }
		let ender = true
		let text_input = blank_check.text
		while (ender) {
			let censored = text_input
			if (user_check.censored) {
				censored.toLocaleLowerCase()
				for (const word of abusivelist) {
					//console.log(word)
					//console.log(re)
					censored = censored.replace(new RegExp( word.toLowerCase(), "g" ), `${'*'.repeat(word.length)}`)
					//console.log(filters)
				}
			}
			const corrected = await context.question(`üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –∞–Ω–∫–µ—Ç—É ${blank_check.id}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù —Ç–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞: ${censored}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline()
				}
			)
			if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
				if (text_input.length < 30) { await context.send(`–ê–Ω–∫–µ—Ç—É –æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
				const blank_edit = await prisma.blank.update({ where: { id: blank_check.id }, data: { text: text_input } })
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_edit.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${blank_edit.text}`)
				ender = false
			} else {
				if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
					ender = false
				} else {
					text_input = corrected.text.replace(/[^–∞-—è–ê-–Ø0-9—ë–Å -+‚Äî‚Äì(){}[#‚Ññ\]=:;.,!?...]/gi, '')
				}
			}
		}
        await Logger(`(private chat) ~ finished edit self <blank> #${blank_check.id} by <user> ‚Ññ${context.senderId}`)
    })
	hearManager.hear(/‚öô –¶–µ–Ω–∑—É—Ä–∞|!—Ü–µ–Ω–∑—É—Ä–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
        const censored_change = await prisma.account.update({ where: { id: user_check.id }, data: { censored: user_check.censored ? false : true } })
        if (censored_change) { 
			await Send_Message(user_check.idvk, `üîß –¶–µ–Ω–∑—É—Ä–∞ ${censored_change.censored ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`)
			await Logger(`(private chat) ~ changed status activity censored self by <user> ‚Ññ${context.senderId}`)
		}
    })
	hearManager.hear(/!–ø—Ä–∞–≤–∞/, async (context) => {
        if (context.isOutbox == false && (context.senderId == root || await Accessed(context) != 'user') && context.text) {
            const target: number = Number(context.text.replace(/[^0-9]/g,"")) || 0
            if (target > 0) {
                const user: Account | null = await prisma.account.findFirst({ where: { idvk: target } })
                if (user) {
                    const login = await prisma.account.update({ where: { id: user.id }, data: { id_role: user.id_role == 1 ? 2 : 1 } })
                    await context.send(`@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
					await Send_Message(login.idvk, `üîß –í—ã ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
					await Send_Message(chat_id, `@id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
					await Logger(`(private chat) ~ changed role <${login.id_role == 2 ? 'admin' : 'user'}> for #${login.idvk} by <admin> ‚Ññ${context.senderId}`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
					await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
                }
            }
        }
    })
	hearManager.hear(/‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è|!–º–æ–¥–µ—Ä–∞—Ü–∏—è/, async (context: any) => {
		if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		if (!user_check) { return }
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (await Accessed(context) == 'user') { return }
		const blank_build = []
		for (const blank of await prisma.blank.findMany({ where: { banned: true } })) {
			blank_build.push(blank)
		}
		let ender = true
		await Logger(`(private chat) ~ starting check banned blanks by <admin> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector = blank_build[target]
			for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
				const user = await prisma.account.findFirst({ where: { id: report.id_account } })
				await context.send(`üóø –ñ–∞–ª–æ–±–∞ –æ—Ç @id${user?.idvk}(–ö—Ä—ã—Å–∞–•):\nüí¨ –ó–∞—è–≤–ª–µ–Ω–∏–µ: ${report.text}\n\n`)
			}
			const user_warned = await prisma.account.findFirst({ where: { id: selector.id_account } })
			const corrected = await context.question(`‚öñ –í–µ—Ä—à–∏—Ç—Å—è —Å—É–¥ –Ω–∞–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–æ–π –∏ –µ–µ –∞–≤—Ç–æ—Ä–æ–º:\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüë§ –ê–≤—Ç–æ—Ä: https://vk.com/id${user_warned?.idvk}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '‚õî–û—Ç–∫–ª–æ–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '‚úÖ–ó–∞–≤–µ—Ä–∏—Ç—å', payload: { command: 'citizen' }, color: 'secondary' }).row()
					.textButton({ label: 'üö´–ù–∞–∑–∞–¥', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline()
				}
			)
			if (corrected.text == 'üö´–ù–∞–∑–∞–¥' || corrected.text == '!–Ω–∞–∑–∞–¥') {
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.`)
				ender = false
			}
			if (corrected.text == '‚õî–û—Ç–∫–ª–æ–Ω–∏—Ç—å' || corrected.text == '!–æ—Ç–∫–ª–æ–Ω–∏—Ç—å') {
				for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
					await prisma.report.update({ where: { id: report.id }, data: { status: 'denied'}})
					const user = await prisma.account.findFirst({ where: { id: report.id_account } })
					await Send_Message(user!.idvk, `‚õî –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É ${selector.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
				}
				const warn_skip = await prisma.blank.update({ where: { id: selector.id }, data: { banned: false } })
				blank_build.splice(target, 1)
				await Send_Message(user_warned!.idvk, `‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –±—ã–ª–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞, –¥–æ—Å—Ç—É–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
				await Logger(`(private chat) ~ unlock for <blank> #${selector.id} by <admin> ‚Ññ${context.senderId}`)
				await Send_Message(user_check.idvk, `‚úÖ –û–ø—Ä–∞–≤–¥–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã #${selector.id}`)
			}
			if (corrected.text == '‚úÖ–ó–∞–≤–µ—Ä–∏—Ç—å' || corrected.text == '!–∑–∞–≤–µ—Ä–∏—Ç—å') {
				for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
					await prisma.report.update({ where: { id: report.id }, data: { status: 'success'}})
					const user = await prisma.account.findFirst({ where: { id: report.id_account } })
					await Send_Message(user!.idvk, `‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É ${selector.id} –ø—Ä–∏–Ω—è—Ç–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–ª—É–∂–±—É.`)
				}
				const warn_skip = await prisma.blank.delete({ where: { id: selector.id } })
				blank_build.splice(target, 1)
				await Send_Message(user_warned!.idvk, `‚õî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω–µ–π, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞—Å –Ω–∞ —É—á–µ—Ç.`)
				await Logger(`(private chat) ~ warn success for <blank> #${selector.id} by <admin> ‚Ññ${context.senderId}`)
				await Send_Message(user_check.idvk, `‚úÖ –í—ã–¥–∞–ª–∏ –ø—Ä–µ–¥ –≤–ª–∞–¥–µ–ª—å—Ü—É –∞–Ω–∫–µ—Ç—ã #${selector.id}`)
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check banned blanks by <admin> ‚Ññ${context.senderId}`)
    })
}