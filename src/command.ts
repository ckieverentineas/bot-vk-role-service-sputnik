import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import { answerTimeLimit, chat_id, root, timer_text, token, vk } from ".";
import prisma from "./module/prisma";
import { Accessed, checkGroupSubscriber, Confirm_User_Success, Group_Id_Get, Input_Number, Keyboard_Index, Logger, Match, Online_Set, Parser_IDVK, Researcher_Better_Blank, Researcher_Better_Blank_Target_Old, Send_Message, User_Banned, User_Info } from "./module/helper";
import { abusivelist, Censored_Activation, Censored_Activation_Pro } from "./module/blacklist";
import { Account, Blank, Mail } from "@prisma/client";
import { Blank_Browser, Blank_Cleaner, Blank_Like, Blank_Like_Donate, Blank_Report, Blank_Unlike } from "./module/blank_swap";
import { Keyboard_Swap } from "./module/keyboard";
import { BlackList_Printer } from "./module/blacklist_user";
import { Researcher_Better_Blank_Target } from "./module/reseacher/resheacher_up";
import { ico_list } from "./module/icon_list";
import { Photo_Upload_Pro } from "./module/download_photo";

let group_id_now: number | null = null

export function commandUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
	hearManager.hear(/!—Å–ø—É—Ç–Ω–∏–∫|!–°–ø—É—Ç–Ω–∏–∫/, async (context: any) => {
        if (context.peerType == 'chat') { return }
		group_id_now =  group_id_now ? group_id_now : Number(await Group_Id_Get(token))
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		await Online_Set(context)
		const user_inf = await User_Info(context)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
		const mail_check = await prisma.mail.findFirst({ where: {  blank_to: blank_check?.id ?? 0, read: false, find: true } })
		
        const keyboard = new KeyboardBuilder()
    	.textButton({ label: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞', payload: { command: 'card_enter' }, color: 'secondary' })
		.textButton({ label: `${mail_check ? 'üì¨' : 'üì™'} –ü–æ—á—Ç–∞`, payload: { command: 'card_enter' }, color: 'secondary' }).row()
		.textButton({ label: '‚öô –¶–µ–Ω–∑—É—Ä–∞', payload: { command: 'shop_category_enter' }, color: 'negative' })
		keyboard.textButton({ label: '‚ò† –ë–∞–Ω—Ö–∞–º–º–µ—Ä', payload: { command: 'admin_enter' }, color: 'primary' }).row()
		if (await checkGroupSubscriber(context.senderId, group_id_now)) {
			keyboard
			.textButton({ label: 'üåê –ë—Ä–∞—É–∑–µ—Ä', payload: { command: 'shop_category_enter' }, color: 'negative' })
			.textButton({ label: 'üîç –ü–æ–∏—Å–∫', payload: { command: 'inventory_enter' }, color: 'primary' }).row()
		}
    	keyboard
		.textButton({ label: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { command: 'shop_category_enter' }, color: 'positive' })
		.textButton({ label: 'üìê –ü–∫–º–µ—Ç—Ä', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
		if (user_check.donate || await Accessed(context) != `user`) { keyboard.textButton({ label: 'üîß –ü–ª–∞–≥–∏–Ω—ã', payload: { command: 'shop_category_enter' }, color: 'secondary' }) }
		
		
    	//keyboard.urlButton({ label: '‚ö° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: `https://vk.com/@bank_mm-instrukciya-po-polzovaniu-botom-centrobanka-magomira` }).row()
		
    	keyboard.callbackButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
		await Send_Message(user_check.idvk, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${user_inf.first_name}, —á—Ç–æ –∏–∑–≤–æ–ª–∏—Ç–µ?`, keyboard)
        await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
    })
	hearManager.hear(/üîß –ü–ª–∞–≥–∏–Ω—ã|!–ø–ª–∞–≥–∏–Ω|!–ü–ª–∞–≥–∏–Ω/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		await Online_Set(context)
		const user_inf = await User_Info(context)
		
        const keyboard = new KeyboardBuilder()
    	keyboard.textButton({ label: '‚ö∞ –ê—Ä—Ö–∏–≤', payload: { command: 'shop_category_enter' }, color: 'positive' })
		.textButton({ label: 'üéØ –°–Ω–∞–π–ø–µ—Ä', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
    	if (await Accessed(context) != `user`) {
    	    keyboard.textButton({ label: '‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è', payload: { command: 'admin_enter' }, color: 'secondary' }).row()
    	}
    	keyboard.callbackButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
		await Send_Message(user_check.idvk, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤, ${user_inf.first_name}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!`, keyboard)
        await Logger(`(private chat) ~ enter in main menu system is viewed by <user> ‚Ññ${context.senderId}`)
    })
	//–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∫–µ—Ç–µ
	hearManager.hear(/üéØ –°–Ω–∞–π–ø–µ—Ä|!—Å–Ω–∞–π–ø–µ—Ä|!–°–Ω–∞–π–ø–µ—Ä/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check) { return }
		if (!user_check.donate) { return }
		if (!blank_check) { return await context.send(`‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		let blank_build = []
		let counter = 0
		// –º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤
		const input_blank = await Input_Number(context, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ –≥–∏–ø–µ—Ä-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –±–∞–Ω—Ö–∞–º–º–µ—Ä –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n${ico_list['help'].ico}–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`, false)
		if (!input_blank) { return await context.send(`–û—Ç–º–µ–Ω–∞ –≥–∏–ø–µ—Ä-–ø—Ä—ã–∂–∫–∞ –∫ –±–ª–∞–Ω–∫—É`) }
		const blank_get = await prisma.blank.findFirst({ where: { id: input_blank, banned: false } })
		if (!blank_get) { return await context.send(`–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞/—É–¥–∞–ª–µ–Ω–∞`) }
		blank_build.push(blank_get)
		let ender = true
		await Logger(`(private chat) ~ starting check sniper blank by <user> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector: Blank = blank_build[target]
			const blank_check = await prisma.blank.findFirst({ where: { id: selector.id } })
			if (!blank_check) { 
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `)
				continue
			}
			let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
			//–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
			const text = `üìú –ê–Ω–∫–µ—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
			const keyboard = await Keyboard_Swap(blank_build.length, user_check)
			const corrected: any = blank_check.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: blank_check.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–Ω–∞–π–ø–µ—Ä–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			const config: any = {
				'‚õî –ú–∏–º–æ': Blank_Unlike,
				'‚úÖ –û—Ç–∫–ª–∏–∫': Blank_Like,
				'‚úè –ü–∏—Å—å–º–æ': Blank_Like_Donate,
				'‚ö† –ñ–∞–ª–æ–±–∞': Blank_Report,
			}
			if (corrected.text in config) {
				const commandHandler = config[corrected.text];
				const ans = await commandHandler(context, user_check, selector, blank_build, target)
			} else {
				if (corrected.text == 'üö´ –°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
					await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞–π–ø–µ—Ä–∞, –≤ —Ä–æ—Ç —ç—Ç–æ–≥–æ –∫—É–ø–∏–¥–æ–Ω–∞.`)
					ender = false
				} else { await Send_Message(user_check.idvk, `üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`) }
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å !—Å–Ω–∞–π–ø–µ—Ä –µ—â–µ —Ä–∞–∑, –∏–Ω–∞—á–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check sniper blank by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –°–Ω–∞–π–ø–µ—Ä-—Å–Ω–∞–π–ø–µ—Ä-—Å–Ω–∞–π–ø–µ—Ä–æ–∫, –≤ —Ä–æ—Ç —ç—Ç–æ–≥–æ –∫—É–ø–∏–¥–æ–Ω–∞! –í—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	//–¥–ª—è –∞—Ä—Ö–∏–≤–∞
	hearManager.hear(/‚ö∞ –ê—Ä—Ö–∏–≤|!–∞—Ä—Ö–∏–≤|!–ê—Ä—Ö–∏–≤/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check) { return }
		if (!user_check.donate) { return }
		if (!blank_check) { return await context.send(`‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		let blank_build = []
		let counter = 0
		for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
			if (blank.id_account == user_check.id) { continue }
			const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
			if (!vision_check) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
			const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: user_bl_ch?.idvk ?? 0 } })
			if (black_list_my) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: user_check.idvk } })
			if (black_list_other) { continue }
			if (counter > 50) { break }
			blank_build.push(blank)
			counter++
		}
		let ender = true
		await Logger(`(private chat) ~ starting check acrhive blank by <user> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector: Blank = blank_build[target]
			const blank_check = await prisma.blank.findFirst({ where: { id: selector.id } })
			if (!blank_check) { 
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `)
				continue
			}
			let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
			//–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
			const text = `üìú –ê–Ω–∫–µ—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
			const keyboard = await Keyboard_Swap(blank_build.length, user_check)
			const corrected: any = blank_check.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: blank_check.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			const config: any = {
				'‚õî –ú–∏–º–æ': Blank_Unlike,
				'‚úÖ –û—Ç–∫–ª–∏–∫': Blank_Like,
				'‚úè –ü–∏—Å—å–º–æ': Blank_Like_Donate,
				'‚ö† –ñ–∞–ª–æ–±–∞': Blank_Report,
			}
			if (corrected.text in config) {
				const commandHandler = config[corrected.text];
				const ans = await commandHandler(context, user_check, selector, blank_build, target)
			} else {
				if (corrected.text == 'üö´ –°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
					await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∞–Ω–∫–µ—Ç.`)
					ender = false
				} else { await Send_Message(user_check.idvk, `üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`) }
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å !–∞—Ä—Ö–∏–≤ –µ—â–µ —Ä–∞–∑, –∏–Ω–∞—á–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check acrhive blank by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å, –∑–Ω–∞–Ω–∏–µ ‚Äî —Å–∏–ª–∞, –º—É–¥—Ä–æ—Å—Ç—å ‚Äî –∏–¥–∏–ª–ª–∏—è! –í—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	//–ø–æ—á—Ç–∞
	hearManager.hear(/üì¨ –ü–æ—á—Ç–∞|üì™ –ü–æ—á—Ç–∞|!–ø–æ—á—Ç–∞|!–ü–æ—á—Ç–∞/, async (context: any) => {
		if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		if (!user_check) { return }
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!blank_check) { return await context.send(`–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—á—Ç–æ–π, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é "üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞" –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É !–∞–Ω–∫–µ—Ç–∞ –≤ —á–∞—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`)}
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		const mail_build = []
		for (const mail of await prisma.mail.findMany({ where: { blank_to: blank_check.id, read: false, find: true } })) {
			mail_build.push(mail)
		}
		let ender = true
		await Logger(`(private chat) ~ starting check self mail by <user> ‚Ññ${context.senderId}`)
		while (ender && mail_build.length > 0) {
			const target = Math.floor(Math.random() * mail_build.length)
			const selector: Mail = mail_build[target]
			const blank_to_check = await prisma.blank.findFirst({ where: { id: selector.blank_to } })
			const blank_from_check = await prisma.blank.findFirst({ where: { id: selector.blank_from } })
			if (!blank_to_check || !blank_from_check) { 
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, find: false } })
				mail_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –ù–µ–¥–∞–≤–Ω–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check?.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–æ–ª–µ–≤–∏–∫—É —Å –∞–Ω–∫–µ—Ç–æ–π #${blank_from_check?.id}, –Ω–æ –≤–∞—à–∞ –∏–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º\n `)
				continue
			}
			const account_to = await prisma.account.findFirst({ where: { id: blank_to_check.id_account } })
			const account_from = await prisma.account.findFirst({ where: { id: blank_from_check.id_account } })
			if (!account_to || !account_from) {
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, find: false } })
				mail_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –ù–µ–¥–∞–≤–Ω–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check?.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ä–æ–ª–µ–≤–∏–∫—É —Å –∞–Ω–∫–µ—Ç–æ–π #${blank_from_check?.id}, –Ω–æ –≤–∞c –∏–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–æ–º–µ—á–µ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º\n `)
				continue
			}
			let censored = user_check.censored ? await Censored_Activation_Pro(blank_from_check.text) : blank_from_check.text
			//–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
			const text = `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${blank_to_check.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–≤—Ç–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã:\n üìú –ê–Ω–∫–µ—Ç–∞: ${blank_from_check.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
			const keyboard = new KeyboardBuilder()
			.textButton({ label: 'üëé', payload: { command: 'student' }, color: 'secondary' })
			.textButton({ label: 'üëç', payload: { command: 'citizen' }, color: 'secondary' }).row()
			.textButton({ label: 'üö´–°—Ç–æ–ø', payload: { command: 'citizen' }, color: 'secondary' })
			.oneTime().inline()
			const corrected: any = blank_from_check.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: blank_from_check.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ—á—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			if (corrected.text == 'üö´–°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –∞–Ω–∫–µ—Ç.`)
				ender = false
			}
			if (corrected.text == 'üëé' || corrected.text == '!–¥–∏–∑–ª–∞–π–∫') {
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true } })
				mail_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É #${selector.blank_from} –ø–æ–ª–Ω–æ—Å—Ç—å—é.`)
				await Logger(`(private chat) ~ clicked unlike for <blank> #${blank_to_check.id} by <user> ‚Ññ${context.senderId}`)
			}
			if (corrected.text == 'üëç' || corrected.text == '!–ª–∞–π–∫') {
				const mail_skip = await prisma.mail.update({ where: { id: selector.id }, data: { read: true, status: true } })
				mail_build.splice(target, 1)
				await Send_Message(account_to.idvk, `üîä –ù–µ–¥–∞–≤–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞ #${blank_from_check.id}, –∑–Ω–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_to_check.id}.\n –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç–µ —Ñ–ª–µ—à–±–µ–∫–∏ –≤–º–µ—Å—Ç–µ, —Å—Ç–∞–Ω—å—Ç–µ –≤—Ä–∞–≥–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å https://vk.com/id${account_from.idvk} !`)
				await Send_Message(account_from.idvk, `üîä –ù–µ–¥–∞–≤–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–Ω–∫–µ—Ç–∞ #${blank_to_check.id}, –∑–Ω–∞–π—Ç–µ, —á—Ç–æ —ç—Ç–æ –≤–∑–∞–∏–º–Ω–æ –Ω–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${blank_from_check.id}.\n –°–∫–æ—Ä–µ–µ –ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≤–∏—Ç–µ —Ñ–ª–µ—à–±–µ–∫–∏ –≤–º–µ—Å—Ç–µ, —Å—Ç–∞–Ω—å—Ç–µ –≤—Ä–∞–≥–∞–º–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å https://vk.com/id${account_to.idvk} !`)
        		await Logger(`(private chat) ~ clicked like for <blank> #${blank_to_check.id} by <user> ‚Ññ${context.senderId}`)
				const ans_selector = `üåê –ê–Ω–∫–µ—Ç—ã ‚Ññ${blank_from_check.id} + ‚Ññ${blank_to_check.id} = [—Ä–æ–ª–µ–≤–∏–∫–∏ –Ω–∏–∫–æ–≥–¥–∞]!`
    			await Send_Message(chat_id, ans_selector)
			}
		}
		if (mail_build.length == 0) { await Send_Message(user_check.idvk, `üòø –ü–∏—Å—å–º–∞ –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check self mail by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –ö–∏–±–µ—Ä—Å–æ–≤–∏–Ω–∞—è –ø–æ—á—Ç–∞ –Ω–∞ —Å–≤—è–∑–∏, –≤—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	//–¥–ª—è —Ä–∞–Ω–¥–æ–º–∞
	hearManager.hear(/üé≤ –†–∞–Ω–¥–æ–º|!—Ä–∞–Ω–¥–æ–º|!–†–∞–Ω–¥–æ–º/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check) { return }
		if (!blank_check) { return await context.send(`‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		let blank_build = []
		let counter = 0
		for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
			if (blank.id_account == user_check.id) { continue }
			const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
			if (vision_check) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
			const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: user_bl_ch?.idvk ?? 0 } })
			if (black_list_my) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: user_check.idvk } })
			if (black_list_other) { continue }
			if (counter > 50) { break }
			blank_build.push(blank)
			counter++
		}
		let ender = true
		await Logger(`(private chat) ~ starting check random blank by <user> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector: Blank = blank_build[target]
			const blank_check = await prisma.blank.findFirst({ where: { id: selector.id } })
			if (!blank_check) { 
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `)
				continue
			}
			let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
			//–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
			const text = `üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}`
			const keyboard = await Keyboard_Swap(blank_build.length, user_check)
			const corrected: any = blank_check.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: blank_check.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			const config: any = {
				'‚õî –ú–∏–º–æ': Blank_Unlike,
				'‚úÖ –û—Ç–∫–ª–∏–∫': Blank_Like,
				'‚úè –ü–∏—Å—å–º–æ': Blank_Like_Donate,
				'‚ö† –ñ–∞–ª–æ–±–∞': Blank_Report,
			}
			if (corrected.text in config) {
				const commandHandler = config[corrected.text];
				const ans = await commandHandler(context, user_check, selector, blank_build, target)
			} else {
				if (corrected.text == 'üö´ –°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
					await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∞–Ω–∫–µ—Ç.`)
					ender = false
				} else { await Send_Message(user_check.idvk, `üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`) }
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å !—Ä–∞–Ω–¥–æ–º –µ—â–µ —Ä–∞–∑, –∏–Ω–∞—á–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check random blank by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –í —Ä–æ—Ç —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ! –í—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	//–¥–ª—è –ø–æ–∏—Å–∫–∞
	hearManager.hear(/üîç –ü–æ–∏—Å–∫|!–ø–æ–∏—Å–∫|!–ü–æ–∏—Å–∫/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check) { return }
		if (!blank_check) { return await context.send(`‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		let blank_build = []
		await context.send(`‚åõ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–¥–±–∏—Ä–∞–µ–º –∞–Ω–∫–µ—Ç—ã...`)
		for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
			// –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –º–æ—è, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			if (blank.id_account == user_check.id) { continue }
			// –µ—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
			if (vision_check) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
			const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: user_bl_ch?.idvk ?? 0 } })
			if (black_list_my) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: user_check.idvk } })
			if (black_list_other) { continue }
			// –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
			const result = await Researcher_Better_Blank_Target_Old(blank_check.text, blank);
			blank_build.push(result);
			// —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç —à–∞–Ω—Å–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —É–±—ã–≤–∞–Ω–∏—é
			blank_build.sort((a, b) => b.score - a.score)
			// —Ä–µ–∂–µ–º –¥–æ —Ç–æ–ø-50 –∞–Ω–∫–µ—Ç
			blank_build.length = Math.min(blank_build.length, 50); 
		}
		let ender = true
		await Logger(`(private chat) ~ starting check random blank by <user> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const selector: Match = blank_build[0]
			const blank_check = await prisma.blank.findFirst({ where: { id: selector.id } })
			if (!blank_check) { 
				blank_build.splice(0, 1)
				await Send_Message(user_check.idvk, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `)
				continue
			}
			let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
			// –≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
			const text = `üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüîé –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(selector.score*100).toFixed(2)}%\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\n`
			const keyboard = await Keyboard_Swap(blank_build.length, user_check)
			const corrected: any = blank_check.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: blank_check.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			const config: any = {
				'‚õî –ú–∏–º–æ': Blank_Unlike,
				'‚úÖ –û—Ç–∫–ª–∏–∫': Blank_Like,
				'‚úè –ü–∏—Å—å–º–æ': Blank_Like_Donate,
				'‚ö† –ñ–∞–ª–æ–±–∞': Blank_Report,
			}
			if (corrected.text in config) {
				const commandHandler = config[corrected.text];
				const ans = await commandHandler(context, user_check, selector, blank_build, 0)
			} else {
				if (corrected.text == 'üö´ –°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
					await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç.`)
					ender = false
				} else { await Send_Message(user_check.idvk, `üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`) }
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å !—Ä–∞–Ω–¥–æ–º –µ—â–µ —Ä–∞–∑, –∏–Ω–∞—á–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check random blank by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –ê –¥–∞–≤–∞–π—Ç–µ –∑–∞–∫—Ä–æ–µ–º –≥–ª–∞–∑–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞... –í—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	//–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
	hearManager.hear(/üåê –ë—Ä–∞—É–∑–µ—Ä|!–±—Ä–∞—É–∑–µ—Ä|!–ë—Ä–∞—É–∑–µ—Ä/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (!user_check) { return }
		if (!blank_check) { return await context.send(`‚ö† –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É`) }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		if (!await checkGroupSubscriber(context.senderId, group_id_now)) {
			return
		}
		const ans = await Blank_Browser(context, user_check)
		if (!ans.status) { return await context.send(`üîß –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∏—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ`) }
		let blank_build = []
		await context.send(`‚åõ –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–¥–±–∏—Ä–∞–µ–º –∞–Ω–∫–µ—Ç—ã...`)
		for (const blank of await prisma.$queryRaw<Blank[]>`SELECT * FROM Blank WHERE banned = false ORDER BY random() ASC`) {
			if (blank.id_account == user_check.id) { continue }
			const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id, id_account: user_check.id } })
			if (vision_check) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –≤ –º–æ–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const user_bl_ch = await prisma.account.findFirst({ where: { id: blank.id_account}})
			const black_list_my = await prisma.blackList.findFirst({ where: { id_account: user_check.id, idvk: user_bl_ch?.idvk ?? 0 } })
			if (black_list_my) { continue }
			// –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			const black_list_other = await prisma.blackList.findFirst({ where: { id_account: user_bl_ch?.id ?? 0, idvk: user_check.idvk } })
			if (black_list_other) { continue }
			blank_build.push(await Researcher_Better_Blank_Target(ans.text.slice(0, 64), blank))
			blank_build.sort((a, b) => b.score - a.score)
			blank_build.length = Math.min(blank_build.length, 50); 
		}
		
		let ender = true
		await Logger(`(private chat) ~ starting check browser blank by <user> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const selector: Match = blank_build[0]
			const blank_check = await prisma.blank.findFirst({ where: { id: selector.id } })
			if (!blank_check) { 
				blank_build.splice(0, 1)
				await Send_Message(user_check.idvk, `‚ö† –í–Ω–∏–º–∞–Ω–∏–µ, —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑—ä—è—Ç–∞ –∏–∑ –ø–æ–∏—Å–∫–∞:\n\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}\n `)
				continue
			}
			let censored = user_check.censored ? await Censored_Activation_Pro(selector.text) : selector.text
			//–≤—ã–¥–∞—á–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ
			const text = `üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüîé –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(selector.score*100).toFixed(2)}%\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\n`
			const keyboard = await Keyboard_Swap(blank_build.length, user_check)
			const corrected: any = blank_check.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: blank_check.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –∞–Ω–∫–µ—Ç –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			const config: any = {
				'‚õî –ú–∏–º–æ': Blank_Unlike,
				'‚úÖ –û—Ç–∫–ª–∏–∫': Blank_Like,
				'‚úè –ü–∏—Å—å–º–æ': Blank_Like_Donate,
				'‚ö† –ñ–∞–ª–æ–±–∞': Blank_Report,
			}
			if (corrected.text in config) {
				const commandHandler = config[corrected.text];
				const ans = await commandHandler(context, user_check, selector, blank_build, 0)
			} else {
				if (corrected.text == 'üö´ –°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
					await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.`)
					ender = false
				} else { await Send_Message(user_check.idvk, `üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`) }
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –û—á–µ—Ä–µ–¥—å –∞–Ω–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å !–±—Ä–∞—É–∑–µ—Ä –µ—â–µ —Ä–∞–∑, –∏–Ω–∞—á–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check browser blank by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –•–≤–∞—Ç–∏—Ç –∏—Å–∫–∞—Ç—å –∏ —Å–µ—Ä—Ñ–∏—Ç—å? –ù–µ—Ç, –Ω–µ —Ö–≤–∞—Ç–∏—Ç, –≤—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	// –¥–ª—è –∞–Ω–∫–µ—Ç—ã
	hearManager.hear(/üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç–∞|!–∞–Ω–∫–µ—Ç–∞|!–ê–Ω–∫–µ—Ç–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
		if (!blank_check) {
			let ender = true
			let text_input = ``
			let status_check = ``
			await Logger(`(private chat) ~ starting creation self blank by <user> ‚Ññ${context.senderId}`)
			while (ender) {
				let censored = user_check.censored ? await Censored_Activation_Pro(text_input) : text_input
				const corrected: any = await context.question(`üß∑ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ—Ç 30 –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤, –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã: \n üí°–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ç—Ä–æ–∫, –∂–µ–ª–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã –∏–ª–∏ –∂–µ —Å—é–∂–µ—Ç... –¥—Ä—É–≥–∏–µ –Ω—é–∞–Ω—Å—ã.\nüìù –°–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ:\n${censored}\n\n${status_check}`,
					{	
						keyboard: Keyboard.builder()
						.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
						.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
						.oneTime().inline(),
						answerTimeLimit
					}
				)
				if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
				if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
					if (text_input.length < 30) { await context.send(`–ê–Ω–∫–µ—Ç—É –æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
					ender = false
				} else {
					if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
						await context.send(`üîß –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã`)
						ender = false
						await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); 
						return 
					} else {
						text_input = await Blank_Cleaner(corrected.text)
						status_check = `‚ö† –í –∞–Ω–∫–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${text_input?.length} –∏–∑ ${corrected.text?.length} –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–∏–º–≤–æ–ª–æ–≤, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã!`
					}
				}
			}
			const corrected: any = await context.question(`üß∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '–ë—É–¥—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏', payload: { command: 'student' }, color: 'secondary' })
					.oneTime().inline(),
					answerTimeLimit
				}
			)
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			const photo_link = corrected.text && corrected.text == '–ë—É–¥—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏' ? '' : await Photo_Upload_Pro(corrected)
			const save = await prisma.blank.create({ data: { text: text_input, id_account: user_check.id, photo: photo_link } })
			await context.send(`üîß –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç–∫—É-–∫–æ–Ω—Ñ–µ—Ç–∫—É –ø–æ–¥ UID: ${save.id}`)
		} else {
			const blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
			await Logger(`(private chat) ~ starting self blank is viewed by <user> ‚Ññ${context.senderId}`)
			if (blank) {
				const keyboard = new KeyboardBuilder()
    			.textButton({ label: `‚õî–£–¥–∞–ª–∏—Ç—å ${blank.id}`, payload: { command: 'card_enter' }, color: 'secondary' }).row()
    			.textButton({ label: `‚úè–ò–∑–º–µ–Ω–∏—Ç—å ${blank.id}`, payload: { command: 'inventory_enter' }, color: 'secondary' }).row()
    			keyboard.callbackButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
				const count_vision = await prisma.vision.count({ where: { id_blank: blank.id } })
				const count_max_vision = await prisma.blank.count({})
				const count_success = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: true }})
				const count_ignore = await prisma.mail.count({ where: { blank_to: blank.id, read: true, status: false }})
				const count_wrong = await prisma.mail.count({ where: { blank_to: blank.id, read: true, find: false }})
				const count_unread = await prisma.mail.count({ where: { blank_to: blank.id, read: false }})
				const counter_warn = await prisma.report.count({ where: { id_blank: blank.id } })
				let censored = user_check.censored ? await Censored_Activation_Pro(blank.text) : blank.text
				if (blank.photo.includes('photo')) {
					await Send_Message(user_check.idvk, `üìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${count_vision}/${-1+count_max_vision}\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${counter_warn}/3\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${count_success}\nüö´ –ò–≥–Ω–æ—Ä–æ–≤: ${count_ignore}\n‚åõ –û–∂–∏–¥–∞–µ—Ç: ${count_unread}\n‚ùó –ü–æ—Ç–µ—Ä—è—à–µ–∫: ${count_wrong}`, keyboard, blank.photo)
				} else {
					await Send_Message(user_check.idvk, `üìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${censored}\nüëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${count_vision}/${-1+count_max_vision}\n‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${counter_warn}/3\n‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: ${count_success}\nüö´ –ò–≥–Ω–æ—Ä–æ–≤: ${count_ignore}\n‚åõ –û–∂–∏–¥–∞–µ—Ç: ${count_unread}\n‚ùó –ü–æ—Ç–µ—Ä—è—à–µ–∫: ${count_wrong}`, keyboard)
				}
			}
		}
        await Logger(`(private chat) ~ finished self blank is viewed by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –ê–Ω–∫–µ—Ç–∞ ‚Äî —ç—Ç–æ –ø–æ–≤–æ–¥ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ –∏–ª–∏ –æ –¥—Ä—É–≥–∏—Ö?`)
    })
	hearManager.hear(/‚õî–£–¥–∞–ª–∏—Ç—å|!—É–¥–∞–ª–∏—Ç—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		const [cmd, value] = context.text.split(' ');
        const target = parseInt(value)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id, id: target } })
		if (!blank_check) { return }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `—É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Ññ${blank_check.id}?`)
    	await context.send(`${confirm.text}`)
    	if (!confirm.status) { return; }
		const blank_delete = await prisma.blank.delete({ where: { id: blank_check.id } })
        if (blank_delete) { 
			await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_delete.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_delete.text}`)
			await Logger(`(private chat) ~ deleted self <blank> #${blank_delete.id} by <user> ‚Ññ${context.senderId}`)
		}
		await Keyboard_Index(context, `‚åõ –£–¥–∞–ª–µ–Ω–∏–µ ‚Äî –º–∞—Ç—å —É—á–µ–Ω–∏—è, –≤—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	hearManager.hear(/‚úè–ò–∑–º–µ–Ω–∏—Ç—å|!–∏–∑–º–µ–Ω–∏—Ç—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
		const [cmd, value] = context.text.split(' ');
        const target = parseInt(value)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id, id: target } })
		if (!blank_check) { return }
		if (blank_check.banned) {
			await context.send(`üíî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∂–∞–ª–æ–± –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤`)
			return
		}
		const datenow: any = new Date()
        const dateold: any = new Date(blank_check.crdate)
		const timeouter = 86400000
        if (datenow-dateold > timeouter) { return await context.send(`‚ö† –ê–Ω–∫–µ—Ç–µ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ`) }
		const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚Ññ${blank_check.id}?`)
    	await context.send(`${confirm.text}`)
    	if (!confirm.status) { return; }
		let ender = true
		let text_input = blank_check.text
		let status_check = ``
		while (ender) {
			let censored = user_check.censored ? await Censored_Activation_Pro(text_input) : text_input
			const corrected: any = await context.question(`üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –∞–Ω–∫–µ—Ç—É ${blank_check.id}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, –∞–Ω–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù —Ç–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞: ${censored}\n ${status_check}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline(),
					answerTimeLimit
				}
			)
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
				if (text_input.length < 30) { await context.send(`‚ö† –ê–Ω–∫–µ—Ç—É –æ—Ç 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
				ender = false
			} else {
				if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
					await context.send(`üîß –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã`)
					ender = false
					await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); 
					return 
				} else {
					text_input = await Blank_Cleaner(corrected.text)
					status_check = `‚ö† –í –∞–Ω–∫–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${text_input?.length} –∏–∑ ${corrected.text?.length} –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–∏–º–≤–æ–ª–æ–≤, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã!`
				}
			}
		}
		const corrected: any = await context.question(`üß∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '–ë—É–¥—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏', payload: { command: 'student' }, color: 'secondary' })
				.oneTime().inline(),
				answerTimeLimit
			}
		)
		if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
		const photo_link = corrected.text && corrected.text == '–ë—É–¥—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏' ? '' : await Photo_Upload_Pro(corrected)
		const blank_edit = await prisma.blank.update({ where: { id: blank_check.id }, data: { text: text_input, photo: photo_link } })
		if (blank_edit.photo.includes('photo')) {
			await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_edit.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_edit.text}`, undefined, blank_edit.photo)
		} else {
			await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_edit.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${blank_edit.text}`)
		}
        await Logger(`(private chat) ~ finished edit self <blank> #${blank_check.id} by <user> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –ò–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî –æ—Ç–µ—Ü —É—á–µ–Ω–∏—è, –≤—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	hearManager.hear(/‚öô –¶–µ–Ω–∑—É—Ä–∞|!—Ü–µ–Ω–∑—É—Ä–∞|!–¶–µ–Ω–∑—É—Ä–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const banned_me = await User_Banned(context)
		if (banned_me) { return }
		await Online_Set(context)
        const censored_change = await prisma.account.update({ where: { id: user_check.id }, data: { censored: user_check.censored ? false : true } })
        if (censored_change) { 
			await Send_Message(user_check.idvk, `üîß –¶–µ–Ω–∑—É—Ä–∞ ${censored_change.censored ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`)
			await Logger(`(private chat) ~ changed status activity censored self by <user> ‚Ññ${context.senderId}`)
		}
		await Keyboard_Index(context, `‚åõ –£—Ö —Ç—ã, —Å–µ–π—á–∞—Å –∫–∞–∫ –≤—Å–µ –∑–∞–ø–∏–∫–∞–µ—Ç—Å—è! –í—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	hearManager.hear(/!–ø—Ä–∞–≤–∞|!–ü—Ä–∞–≤–∞/, async (context) => {
		if (context.peerType == 'chat') { return }
        if (context.isOutbox == false && (context.senderId == root || await Accessed(context) != 'user') && context.text) {
            const target: number = Number(await Parser_IDVK(context.text)) || 0
            if (target > 0) {
                const user: Account | null = await prisma.account.findFirst({ where: { idvk: target } })
                if (user) {
					await Online_Set(context)
                    const login = await prisma.account.update({ where: { id: user.id }, data: { id_role: user.id_role == 1 ? 2 : 1 } })
                    await context.send(`üîß @id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
					await Send_Message(login.idvk, `üîß –í—ã ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
					await Send_Message(chat_id, `üîß @id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.id_role == 2 ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'}`)
					await Logger(`(private chat) ~ changed role <${login.id_role == 2 ? 'admin' : 'user'}> for #${login.idvk} by <admin> ‚Ññ${context.senderId}`)
                } else {
                    await context.send(`@id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
					await Logger(`(private chat) ~ not found <user> #${target} by <admin> ‚Ññ${context.senderId}`)
                }
            }
        }
		await Keyboard_Index(context, `‚åõ –°–µ–≥–æ–¥–Ω—è –¥–∞–ª–∏ –ø—Ä–∞–≤–∞ ‚Äî –∑–∞–≤—Ç—Ä–∞ –æ—Ç–∂–∞–ª–∏!`)
    })
	hearManager.hear(/‚öñ –ú–æ–¥–µ—Ä–∞—Ü–∏—è|!–º–æ–¥–µ—Ä–∞—Ü–∏—è|!–ú–æ–¥–µ—Ä–∞—Ü–∏—è/, async (context: any) => {
		if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		if (!user_check) { return }
		await Online_Set(context)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check?.id } })
        if (await Accessed(context) == 'user') { return }
		const blank_build = []
		for (const blank of await prisma.blank.findMany({ where: { banned: true } })) {
			blank_build.push(blank)
		}
		let ender = true
		await Logger(`(private chat) ~ starting check banned blanks by <admin> ‚Ññ${context.senderId}`)
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector: Blank = blank_build[target]
			for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
				const user = await prisma.account.findFirst({ where: { id: report.id_account } })
				await context.send(`üóø –ñ–∞–ª–æ–±–∞ –æ—Ç @id${user?.idvk}(–ö—Ä—ã—Å–∞–•):\nüí¨ –ó–∞—è–≤–ª–µ–Ω–∏–µ: ${report.text}\n\n`)
			}
			const user_warned = await prisma.account.findFirst({ where: { id: selector.id_account } })
			const text = `‚öñ –í–µ—Ä—à–∏—Ç—Å—è —Å—É–¥ –Ω–∞–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–æ–π –∏ –µ–µ –∞–≤—Ç–æ—Ä–æ–º:\nüìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüë§ –ê–≤—Ç–æ—Ä: https://vk.com/id${user_warned?.idvk}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${selector.text}`
			const keyboard = new KeyboardBuilder()
			.textButton({ label: '‚õî–û—Ç–∫–ª–æ–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
			.textButton({ label: '‚úÖ–ó–∞–≤–µ—Ä–∏—Ç—å', payload: { command: 'citizen' }, color: 'secondary' }).row()
			.textButton({ label: 'üö´–°—Ç–æ–ø', payload: { command: 'citizen' }, color: 'secondary' })
			.oneTime().inline()
			const corrected: any = selector.photo.includes('photo') ? await context.question( text, {keyboard, answerTimeLimit, attachment: selector.photo}) : await context.question( text, {keyboard, answerTimeLimit})
			if (corrected.isTimeout) { await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–¥–µ–±–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–µ–∫–ª–æ!`); await Keyboard_Index(context, `‚åõ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...`); return }
			if (corrected.text == 'üö´–°—Ç–æ–ø' || corrected.text == '!—Å—Ç–æ–ø') {
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.`)
				ender = false
			}
			if (corrected.text == '‚õî–û—Ç–∫–ª–æ–Ω–∏—Ç—å' || corrected.text == '!–æ—Ç–∫–ª–æ–Ω–∏—Ç—å') {
				for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
					await prisma.report.update({ where: { id: report.id }, data: { status: 'denied'}})
					const user = await prisma.account.findFirst({ where: { id: report.id_account } })
					await Send_Message(user!.idvk, `‚õî –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É ${selector.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`)
				}
				const warn_skip = await prisma.blank.update({ where: { id: selector.id }, data: { banned: false } })
				blank_build.splice(target, 1)
				await Send_Message(user_warned!.idvk, `‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –±—ã–ª–∞ –æ–ø—Ä–∞–≤–¥–∞–Ω–∞, –¥–æ—Å—Ç—É–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`)
				await Logger(`(private chat) ~ unlock for <blank> #${selector.id} by <admin> ‚Ññ${context.senderId}`)
				await Send_Message(user_check.idvk, `‚úÖ –û–ø—Ä–∞–≤–¥–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–Ω–∫–µ—Ç—ã #${selector.id}`)
			}
			if (corrected.text == '‚úÖ–ó–∞–≤–µ—Ä–∏—Ç—å' || corrected.text == '!–∑–∞–≤–µ—Ä–∏—Ç—å') {
				for (const report of await prisma.report.findMany({ where: { id_blank: selector.id, status: 'wait' } })) {
					await prisma.report.update({ where: { id: report.id }, data: { status: 'success'}})
					const user = await prisma.account.findFirst({ where: { id: report.id_account } })
					await Send_Message(user!.idvk, `‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –∞–Ω–∫–µ—Ç—É ${selector.id} –ø—Ä–∏–Ω—è—Ç–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–ª—É–∂–±—É.`)
				}
				const warn_skip = await prisma.blank.delete({ where: { id: selector.id } })
				blank_build.splice(target, 1)
				await Send_Message(user_warned!.idvk, `‚õî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –æ–Ω–∞ —É–¥–∞–ª–µ–Ω–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω–µ–π, –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞—Å –Ω–∞ —É—á–µ—Ç.`)
				await Logger(`(private chat) ~ warn success for <blank> #${selector.id} by <admin> ‚Ññ${context.senderId}`)
				await Send_Message(user_check.idvk, `‚úÖ –í—ã–¥–∞–ª–∏ –ø—Ä–µ–¥ –≤–ª–∞–¥–µ–ª—å—Ü—É –∞–Ω–∫–µ—Ç—ã #${selector.id}`)
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ.`)}
        await Logger(`(private chat) ~ finished check banned blanks by <admin> ‚Ññ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–æ—Å—É–¥–∏—è ‚Äî —ç—Ç–æ –æ—Ç—Å—Ç–æ–π–Ω–æ... –í—ã–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ —Å–ø—É—Ç–Ω–∏–∫–∞...`)
    })
	hearManager.hear(/!–µ–Ω–æ—Ç–∏–∫/, async (context: any) => {
		if (context.peerType == 'chat') { return }
		const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
		if (!user_check) { return }
        if (context.senderId != root && user_check.id_role != 2) { return }
		await Online_Set(context)
        await context.sendDocuments({ value: `./prisma/dev.db`, filename: `dev.db` }, { message: 'üí° –û—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://sqliteonline.com/' } );
        await vk.api.messages.send({
            peer_id: chat_id,
            random_id: 0,
            message: `‚Äº @id${context.senderId}(Admin) –¥–µ–ª–∞–µ—Ç –±–µ–∫–∞–ø –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö dev.db.`
        })
        await Logger(`In private chat, did backup database by admin ${context.senderId}`)
		await Keyboard_Index(context, `‚åõ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–∞–∫ –∑–∞—Ä—è–¥–∫–∞: —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ—à—å ‚Äî –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç!`)
    })
	hearManager.hear(/!–±–∞–Ω|!–ë–∞–Ω/, async (context) => {
		if (context.peerType == 'chat') { return }
        if (context.isOutbox == false && (context.senderId == root || await Accessed(context) != 'user') && context.text) {
			const target = await Parser_IDVK(context.text)
			if (!target) { return }
            const user: Account | null = await prisma.account.findFirst({ where: { idvk: Number(target) } })
            if (user) {
				await Online_Set(context)
                const login = await prisma.account.update({ where: { id: user.id }, data: { banned: user.banned ? false : true } })
                await context.send(`üîß @id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
				await Send_Message(login.idvk, `üîß –í—ã ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
				await Send_Message(chat_id, `üîß @id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.banned ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö'}`)
				await Logger(`(private chat) ~ banned status changed <${login.banned ? 'true' : 'false'}> for #${login.idvk} by <admin> ‚Ññ${context.senderId}`)
				const blank_block = await prisma.blank.findFirst({ where: { id_account: login.id } })
				if (!blank_block) { return await Keyboard_Index(context, `‚åõ  –£ –ª–∞–º–∏–Ω–∞—Ç–∞ –Ω–µ –±—ã–ª–æ –∞–Ω–∫–µ—Ç—ã!`)}
				const blank_del = await prisma.blank.delete({ where: { id: blank_block.id } })
				if (!blank_del) { return }
				await Send_Message(login.idvk, `üîß –ê–Ω–∫–µ—Ç–∞ ${blank_del.id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞:\n ${blank_del.text}`)
            } else {
                await context.send(`‚ö† @id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
				await Logger(`(private chat) ~ not found <user> #${target} for ban by <admin> ‚Ññ${context.senderId}`)
            }
        }
		await Keyboard_Index(context, `‚åõ  –ó–∞–±–∞–Ω—å—Ç–µ –º–µ–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é!`)
    })
	hearManager.hear(/!–¥–æ–Ω–∞—Ç–µ—Ä|!–î–æ–Ω–∞—Ç–µ—Ä/, async (context) => {
		if (context.peerType == 'chat') { return }
        if (context.isOutbox == false && (context.senderId == root || await Accessed(context) != 'user') && context.text) {
			const target = await Parser_IDVK(context.text)
			if (!target) { return }
            const user: Account | null = await prisma.account.findFirst({ where: { idvk: Number(target) } })
            if (user) {
				await Online_Set(context)
                const login = await prisma.account.update({ where: { id: user.id }, data: { donate: user.donate ? false : true } })
                await context.send(`üîß @id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
				await Send_Message(login.idvk, `üîß –í—ã ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
				await Send_Message(chat_id, `üîß @id${login.idvk}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ${login.donate ? '–¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤' : '—É–±—Ä–∞–Ω –∏–∑ –ª–∏—Å—Ç–∞ –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤'}`)
				await Logger(`(private chat) ~ donate status changed <${login.donate ? 'true' : 'false'}> for #${login.idvk} by <admin> ‚Ññ${context.senderId}`)
            } else {
                await context.send(`‚ö† @id${target}(–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
				await Logger(`(private chat) ~ not found <user> #${target} for donate status by <admin> ‚Ññ${context.senderId}`)
            }
        }
		await Keyboard_Index(context, `‚åõ –ú—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∑–∞ —Ç–µ—Ö, –∫—Ç–æ –∑–∞–¥–æ–Ω–∞—Ç–∏–ª!`)
    })
	hearManager.hear(/‚ò† –ë–∞–Ω—Ö–∞–º–º–µ—Ä|!—á—Å|!–ß—Å/, async (context) => {
		if (context.peerType == 'chat') { return }
        await BlackList_Printer(context)
		await Keyboard_Index(context, `‚åõ –¢—É–¥–∞ –∏—Ö –≤—Å–µ—Ö, –Ω–µ —Ç–∞–∫ –ª–∏?!`)
    })
}