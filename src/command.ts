import { HearManager } from "@vk-io/hear";
import { randomInt } from "crypto";
import { Keyboard, KeyboardBuilder } from "vk-io";
import { IQuestionMessageContext } from "vk-io-question";
import { root } from ".";
import prisma from "./module/prisma";
import { Accessed, Logger, Send_Message, User_Info } from "./module/helper";

export function registerUserRoutes(hearManager: HearManager<IQuestionMessageContext>): void {
	hearManager.hear(/!—Å–ø—É—Ç–Ω–∏–∫|!–°–ø—É—Ç–Ω–∏–∫/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const user_inf = await User_Info(context)
        const keyboard = new KeyboardBuilder()
    	.textButton({ label: 'üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç—ã', payload: { command: 'card_enter' }, color: 'secondary' }).row()
    	.textButton({ label: 'üîç –ò—Å–∫–∞—Ç—å –∫–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ—Ñ–∏–≥', payload: { command: 'inventory_enter' }, color: 'secondary' }).row()
		.textButton({ label: 'üé≤ –†–∞–Ω–¥–æ–º', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
    	.textButton({ label: 'üåê –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ—Ä–Ω–æ', payload: { command: 'shop_category_enter' }, color: 'positive' }).row()
    	//.callbackButton({ label: 'üéì –£—á–µ–±–ª—è', payload: { command: 'operation_enter' }, color: 'positive' }).row()
    	if (await Accessed(context) != `user`) {
    	    keyboard.callbackButton({ label: '‚öô –ê–¥–º–∏–Ω—ã', payload: { command: 'admin_enter' }, color: 'secondary' })
    	}
    	keyboard.urlButton({ label: '‚ö° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: `https://vk.com/@bank_mm-instrukciya-po-polzovaniu-botom-centrobanka-magomira` }).row()
    	keyboard.textButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
        if (await prisma.blank.count({ where: { id_account: user_check.id } }) > 1) {
            keyboard.textButton({ label: 'üîÉüë•', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'secondary' })
        }
        keyboard.inline()
		await Send_Message(user_check.idvk, `üõ∞ –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤ ${user_inf.first_name}, —á—Ç–æ –∏–∑–≤–æ–ª–∏—Ç–µ?`, keyboard)
		
        
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
	//–¥–ª—è —Ä–∞–Ω–¥–æ–º–∞
	hearManager.hear(/üé≤ –†–∞–Ω–¥–æ–º|!—Ä–∞–Ω–¥–æ–º/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const blank_build = []
		for (const blank of await prisma.blank.findMany()) {
			if (blank.id_account == user_check.id) { continue }
			const vision_check = await prisma.vision.findFirst({ where: { id_blank: blank.id } })
			if (vision_check) { continue }
			blank_build.push(blank)
		}
		let ender = true
		while (ender && blank_build.length > 0) {
			const target = Math.floor(Math.random() * blank_build.length)
			const selector = blank_build[target]
			const corrected = await context.question(`üìú –ê–Ω–∫–µ—Ç–∞: ${selector.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${selector.text}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '‚õî–ù–∞–ª–µ–≤–æ', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '‚úÖ–ù–∞–ø—Ä–∞–≤–æ', payload: { command: 'citizen' }, color: 'secondary' }).row()
					.textButton({ label: 'üö´–ù–∞–∑–∞–¥', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline()
				}
			)
			if (corrected.text == 'üö´–ù–∞–∑–∞–¥') {
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∞–Ω–∫–µ—Ç.`)
				ender = false
			}
			if (corrected.text == '‚õî–ù–∞–ª–µ–≤–æ') {
				//const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É #${selector.id}.`)
			}
			if (corrected.text == '‚úÖ–ù–∞–ø—Ä–∞–≤–æ') {
				//const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
				blank_build.splice(target, 1)
				await Send_Message(user_check.idvk, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${selector.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
				const user_nice = await prisma.account.findFirst({ where: { id: selector.id_account } })
				const user_blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
				await Send_Message(user_nice?.idvk ?? user_check.idvk, `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∞–≤—Ç–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã:\n üìú –ê–Ω–∫–µ—Ç–∞: ${user_blank?.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${user_blank?.text}`,
					
						Keyboard.builder()
						.textButton({ label: 'üëç–ù—Ä–∞–∏—Ü–∞', payload: { command: 'student' }, color: 'secondary' })
						.textButton({ label: 'üëé–ü–æ—à–µ–ª –ù–∞—Ñ–∏–≥', payload: { command: 'citizen' }, color: 'secondary' }).row()
						.oneTime().inline()
					
				)
			}
		}
		if (blank_build.length == 0) { await Send_Message(user_check.idvk, `üòø –ê–Ω–∫–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ - –º–∞—Å–ª–µ–Ω–æ–∫.`)}
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
	// –¥–ª—è –∞–Ω–∫–µ—Ç—ã
	hearManager.hear(/üìÉ –ú–æ—è –∞–Ω–∫–µ—Ç—ã|!–∞–Ω–∫–µ—Ç–∞/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
		if (!blank_check) {
			let ender = true
			let text_input = ``
			while (ender) {
				const corrected = await context.question(`üß∑ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù –°–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ: ${text_input}`,
					{	
						keyboard: Keyboard.builder()
						.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
						.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
						.oneTime().inline()
					}
				)
				if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
					const save = await prisma.blank.create({ data: { text: text_input, id_account: user_check.id } })
					await context.send(`–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∞–Ω–∫–µ—Ç–∫—É-–∫–æ–Ω—Ñ–µ—Ç–∫—É –ø–æ–¥ UID: ${save.id}`)
					ender = false
				} else {
					if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
						ender = false
					} else {
						text_input = corrected.text
					}
				}
			}
		} else {
			const blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
			if (blank) {
				const keyboard = new KeyboardBuilder()
    			.textButton({ label: `‚õî–£–¥–∞–ª–∏—Ç—å ${blank.id}`, payload: { command: 'card_enter' }, color: 'secondary' }).row()
    			.textButton({ label: `‚úè–ò–∑–º–µ–Ω–∏—Ç—å ${blank.id}`, payload: { command: 'inventory_enter' }, color: 'secondary' }).row()
    			keyboard.textButton({ label: 'üö´', payload: { command: 'exit' }, color: 'secondary' }).oneTime().inline()
				await Send_Message(user_check.idvk, `üìú –ê–Ω–∫–µ—Ç–∞: ${blank.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${blank.text}`, keyboard)
			}
		}
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
	hearManager.hear(/‚õî–£–¥–∞–ª–∏—Ç—å|!—É–¥–∞–ª–∏—Ç—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const [cmd, value] = context.text.split(' ');
        const target = parseInt(value)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id, id: target } })
		if (!blank_check) { return }
		const blank_delete = await prisma.blank.delete({ where: { id: blank_check.id } })
        if (blank_delete) { 
			await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_delete.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${blank_delete.text}`)
		}
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
	hearManager.hear(/‚úè–ò–∑–º–µ–Ω–∏—Ç—å|!–∏–∑–º–µ–Ω–∏—Ç—å/, async (context: any) => {
        if (context.peerType == 'chat') { return }
        const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
        if (!user_check) { return }
		const [cmd, value] = context.text.split(' ');
        const target = parseInt(value)
		const blank_check = await prisma.blank.findFirst({ where: { id_account: user_check.id, id: target } })
		if (!blank_check) { return }
		let ender = true
		let text_input = blank_check.text
		while (ender) {
			const corrected = await context.question(`üß∑ –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –∞–Ω–∫–µ—Ç—É ${blank_check.id}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù —Ç–µ–∫—É—â–∞—è –∞–Ω–∫–µ—Ç–∞: ${text_input}`,
				{	
					keyboard: Keyboard.builder()
					.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
					.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
					.oneTime().inline()
				}
			)
			if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
				const blank_edit = await prisma.blank.update({ where: { id: blank_check.id }, data: { text: text_input } })
				await Send_Message(user_check.idvk, `‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ:\nüìú –ê–Ω–∫–µ—Ç–∞: ${blank_edit.id}\nüí¨ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${blank_edit.text}`)
				ender = false
			} else {
				if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
					ender = false
				} else {
					text_input = corrected.text
				}
			}
		}
        await Logger(`In private chat, invite enter in system is viewed by user ${context.senderId}`)
    })
}