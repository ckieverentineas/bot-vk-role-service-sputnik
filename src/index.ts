import { VK, Keyboard } from 'vk-io';
import { HearManager } from '@vk-io/hear';
import {
    QuestionManager,
    IQuestionMessageContext
} from 'vk-io-question';
import * as dotenv from 'dotenv' // see https://github.com/motdotla/dotenv#how-do-i-use-dotenv-with-import
import { Keyboard_Index, Logger, Send_Message, User_Info, Worker_Checker } from './module/helper';
import { InitGameRoutes } from './init';
import { registerUserRoutes } from './command';
import prisma from './module/prisma';
dotenv.config()

export const token: string = String(process.env.token)
export const root: number = Number(process.env.root) //root user
export const chat_id: number = Number(process.env.chat_id) //chat for logs
export const group_id: number = Number(process.env.group_id)//clear chat group
export const timer_text = { answerTimeLimit: 300_000 } // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
export const timer_text_oper = { answerTimeLimit: 60_000 } // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
export const answerTimeLimit = 300_000 // –æ–∂–∏–¥–∞—Ç—å –ø—è—Ç—å –º–∏–Ω—É—Ç
export const starting_date = new Date(); // –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
//–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async function Group_Id_Get() {
	const vk = new VK({ token: token, apiLimit: 1 });
	const [group] = await vk.api.groups.getById(vk);
	const groupId = group.id;
	return groupId
}
export const vk = new VK({ token: token, pollingGroupId: Number(Group_Id_Get()), apiLimit: 20, apiMode: 'parallel_selected' });
//–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const questionManager = new QuestionManager();
const hearManager = new HearManager<IQuestionMessageContext>();

/*prisma.$use(async (params, next) => {
	console.log('This is middleware!')
	// Modify or interrogate params here
	console.log(params)
	return next(params)
})*/

//–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
vk.updates.use(questionManager.middleware);
vk.updates.on('message_new', hearManager.middleware);

//—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤
InitGameRoutes(hearManager)
registerUserRoutes(hearManager)
export const users_pk: Array<{ idvk: number, text: string, mode: boolean }> = []
//–º–∏–¥–¥–ª–µ–≤–∞—Ä –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
vk.updates.on('message_new', async (context: any, next: any) => {
	if (context.peerType == 'chat') { 
		try { 
			await vk.api.messages.delete({'peer_id': context.peerId, 'delete_for_all': 1, 'cmids': context.conversationMessageId, 'group_id': group_id})
			await Logger(`In chat received a message from the user ${context.senderId} and was deleted`)
			//await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚úÖüö´ @id${context.senderId} ${context.text}`})  
		} catch (error) { 
			await Logger(`In chat received a message from the user ${context.senderId} and wasn't deleted`)
			//await vk.api.messages.send({ peer_id: chat_id, random_id: 0, message: `‚õîüö´ @id${context.senderId} ${context.text}`}) 
		}  
		return
	}
	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö
	const user_check = await prisma.account.findFirst({ where: { idvk: context.senderId } })
	//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	if (!user_check) {
		//—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
		const answer = await context.question(`‚åõ –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –¶–µ–Ω—Ç—Ä–∑–Ω–∞–∫–æ–º –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ –ú–∞–≥–∏–∏ üè¶, –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–ª–∏ –¥–≤–∞ —Ä–æ–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–æ—Ä–æ–≥–∞ –∏ –ø—Ä–æ–∏–∑–Ω–µ—Å–ª–∏: \n ‚Äî –ö—É–ø–∏–¥–æ–Ω –†–æ–ª–µ–≤–∏–∫ –≥–æ–≤–æ—Ä–∏–ª –Ω–∞–º –æ –≤–∞—Å. –ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ä–∞—Å–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å –æ —Å–≤–æ–µ–º —Å–æ–≥–ª–∞—Å–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ –Ω–µ —Ä–∞–∑–≥—Ä–ª–∞—à–µ–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. \n –í —Ç–æ—Ç –∂–µ –º–∏–≥ –≤ –∏—Ö —Ä—É–∫–∞—Ö –º–∞–≥–∏—á–µ—Å–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ—è–≤–∏–ª—Å—è –ø–µ—Ä–≥–∞–º–µ–Ω—Ç. \n üí° –£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è!`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '‚úè', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
				.textButton({ label: 'üë£', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime(),
				answerTimeLimit
			}
		);
		if (answer.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (!/–¥–∞|yes|–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è|–∫–æ–Ω–µ—á–Ω–æ|‚úè/i.test(answer.text|| '{}')) {
			await context.send('‚åõ –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –¥–∞—Ç—å —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ, –∞ –∂–∏–≤—ã–º –æ—Ç—Å—é–¥–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—Ö–æ–¥–∏–ª, –≤–∞—Å —É–ø–∞–∫–æ–≤–∞–ª–∏!');
			return;
		}
		//–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
		const visit = await context.question(`‚åõ –ü–æ—Å—Ç–∞–≤–∏–≤ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å—å, –≤—ã –æ—Ñ–∏–≥–µ–ª–∏ –Ω–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –∑–¥–µ—Å—å —Ä–æ–∑–æ–≤—ã–µ –µ–¥–∏–Ω–æ—Ä–æ–≥–∏, –∞ –ª–∏—à—å –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –æ–Ω–∏ –ì–û–í–û–†–Ø–©–ò–ï —Å—É–∫@, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¶–µ–Ω—Ç–∑–Ω–∞–∫–æ–º –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ú–∏–Ω–£—Å–ª—É–≥, –∏ —É–≤–∏–¥–µ–ª–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ñ–µ—Å—Ç—Ä–∞–ª–∞, –Ω–∞–≤–æ–¥—è—â–µ–≥–æ —Å–º–µ—Ä—Ç—å –∏ –ø–æ–∫–æ–π –≤ –≤–∞—à–∏—Ö –ø–æ–∫–æ—è—Ö.`,
			{ 	
				keyboard: Keyboard.builder()
				.textButton({ label: '–ü–æ–¥–æ–π—Ç–∏ –∏ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è', payload: { command: '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è' }, color: 'positive' }).row()
				.textButton({ label: '–ñ–¥–∞—Ç—å, –ø–æ–∫–∞ —Ñ–µ—Å—Ç—Ä–∞–ª –∑–∞–∫–æ–Ω—á–∏—Ç', payload: { command: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è' }, color: 'negative' }).oneTime().inline(),
				answerTimeLimit
			}
		);
		if (visit.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ!`) }
		const save = await prisma.account.create({	data: {	idvk: context.senderId } })
		const info = await User_Info(context)
		await context.send(`‚åõ –§–µ—Å—Ç—Ä–∞–ª –∑–∞—Å–∫—É—á–∞–ª –∏ –ø—Ä–æ—Å–µ–∫, —á—Ç–æ –≤—ã –µ–≥–æ —Ç–æ–∂–µ –≤–∏–¥–∏—Ç–µ, –ø–æ—ç—Ç–æ–º—É –ø–æ–¥–æ—à–µ–ª –∏ —Å–∫–∞–∑–∞–ª.\n - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø–æ—Ä–Ω–æ–º–∞–≥–∏–∏ –∏ —Ö–∞—É—Å–∞! \n –ò –ø—Ä–æ—Ç—è–Ω—É–ª –≤–∞–º –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É.\n ‚öñ–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—Ç–µ–∫—É, ${info.first_name}\n üïØ GUID: ${save.id}. \n üé• idvk: ${save.idvk}\n ‚ö∞ –î–∞—Ç–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${save.crdate}\n`)
		await Logger(`In database created new user with uid [${save.id}] and idvk [${context.senderId}]`)
		/*await context.send(`‚ö† –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã "–¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ú–∞–≥–æ–º–∏—Ä–∞":`,{ 	
			keyboard: Keyboard.builder()
			.urlButton({ label: '‚ö° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url: `https://vk.com/@bank_mm-instrukciya-po-polzovaniu-botom-centrobanka-magomira` }).row().inline(),
			answerTimeLimit
		})*/
		const ans_selector = `‚Åâ @id${save.idvk}(${info.first_name}) –ª–µ–≥–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É GUID: ${save.id}!`
		await Send_Message(chat_id, ans_selector)
		await Keyboard_Index(context, `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–æ–≥–¥–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ [!–±–∞–Ω–∫] –±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ—á–µ–∫, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: ‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!`)
	} else {
		await Keyboard_Index(context, `‚åõ –ó–∞–≥—Ä—É–∑–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`)
	}
	return next();
})
vk.updates.on('message_event', async (context: any, next: any) => { 
	/*await Person_Detector(context)
	const config: any = {
		"system_call": Main_Menu_Init,
		"card_enter": Card_Enter,
		"birthday_enter": Birthday_Enter,
		"exit": Exit,
		"artefact_enter": Artefact_Enter,
		"inventory_enter": Inventory_Enter,
		"admin_enter": Admin_Enter,
		"service_enter": Service_Enter,
		"service_cancel": Service_Cancel,
		"shop_category_enter": Shop_Category_Enter,
		"shop_enter": Shop_Enter,
		"shop_cancel": Shop_Cancel,
		"shop_bought": Shop_Bought,
		"shop_buy": Shop_Buy,
		"operation_enter": Operation_Enter, // –∑–∞–≥–ª—É—à–∫–∏
		"right_enter": Right_Enter, // –∑–∞–≥–ª—É—à–∫–∏
		"service_kvass_open": Service_Kvass_Open,
		"statistics_enter": Statistics_Enter,
		"rank_enter": Rank_Enter,
		"alliance_control_multi": Alliance_Control_Multi,
		"alliance_control": Alliance_Control,
		"alliance_controller": Alliance_Controller,
		'alliance_enter': Alliance_Enter,
		'alliance_enter_admin': Alliance_Enter_Admin,
		'alliance_rank_enter': Alliance_Rank_Enter,
		'alliance_rank_coin_enter': Alliance_Rank_Coin_Enter
	}
	try {
		await config[context.eventPayload.command](context)
	} catch (e) {
		await Logger(`Error event detected for callback buttons: ${e}`)
	}*/
	return await next();
})

vk.updates.start().then(() => {
	Logger('running succes')
}).catch(console.error);
setInterval(Worker_Checker, 86400000);
process.on('warning', e => console.warn(e.stack))