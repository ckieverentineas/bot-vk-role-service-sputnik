import { Account, BlackList } from "@prisma/client";
import prisma from "./prisma";
import { KeyboardBuilder } from "vk-io";
import { answerTimeLimit, timer_text, vk } from "..";
import { Confirm_User_Success, Logger, Parser_IDVK, Send_Message } from "./helper";

//–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏
async function BLackList_Get(cursor: number, account: Account) {
    const batchSize = 5;
    let counter = 0
    let limiter = 0
    let res: BlackList[] = []
    for (const location of await prisma.blackList.findMany({ where: { id_account: account.id } })) {
        if ((cursor <= counter && batchSize+cursor >= counter) && limiter < batchSize) {
            res.push(location)
            limiter++
        }
        counter++
    }
    
   return res
}
export async function BlackList_Printer(context: any) {
    const account = await prisma.account.findFirst({ where: { idvk: context.senderId } })
    if (!account) { return }
    
    let location_tr = false
    let cursor = 0
    while (!location_tr) {
        const keyboard = new KeyboardBuilder()
        let event_logger = ``
        for await (const location of await BLackList_Get(cursor, account)) {
            let [info]= await vk.api.users.get({user_id: location.idvk});
            keyboard.textButton({ label: `üëÄ ${location.id}-${info.first_name}`, payload: { command: 'location_select', cursor: cursor, id_location: location.id }, color: 'secondary' })
            .textButton({ label: `‚õî`, payload: { command: 'location_delete', cursor: cursor, id_location: location.id }, color: 'secondary' }).row()
            event_logger += `üí¨ ${location.id} - ${info.first_name} ${info.last_name}\nüìé –°—Å—ã–ª–∫–∞: https://vk.com/id${location.idvk}\n`
        }
        if (cursor >= 5) { keyboard.textButton({ label: `‚Üê`, payload: { command: 'location_back', cursor: cursor }, color: 'secondary' }) }
        const location_counter = await prisma.blackList.count({ where: { id_account: account.id } })
        if (5+cursor < location_counter) { keyboard.textButton({ label: `‚Üí`, payload: { command: 'location_next', cursor: cursor }, color: 'secondary' }) }
        keyboard.textButton({ label: `‚ûï`, payload: { command: 'location_create', cursor: cursor }, color: 'secondary' }).row()
        .textButton({ label: `üö´`, payload: { command: 'location_return', cursor: cursor }, color: 'secondary' }).oneTime()
        event_logger += `\n ${1+cursor} –∏–∑ ${location_counter}`
        const location_bt = await context.question(`üß∑ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–∏—Ö:\n\n ${event_logger}`,
            {	
                keyboard: keyboard, answerTimeLimit
            }
        )
        if (location_bt.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏—Å—Ç–µ–∫–ª–æ!`) }
        if (!location_bt.payload) {
            await context.send(`üí° –ñ–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏!`)
        } else {
            const config: any = {
                'location_select': Location_Select,
                'location_create': Location_Create,
                'location_next': Location_Next,
                'location_back': Location_Back,
                'location_return': Location_Return,
                'location_delete': Location_Delete
            }
            const ans = await config[location_bt.payload.command](context, location_bt.payload, account)
            cursor = ans?.cursor || ans?.cursor == 0 ? ans.cursor : cursor
            location_tr = ans.stop ? ans.stop : false
        }
    }
    
}

async function Location_Delete(context: any, data: any, account: Account) {
    const res = { cursor: data.cursor }
    const location_check = await prisma.blackList.findFirst({ where: { id: data.id_location } })
    if (!location_check) { return res }
    const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `—É–±—Ä–∞—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.com/id${location_check.idvk} ?`)
    await context.send(`${confirm.text}`)
    if (!confirm.status) { return res }
    if (location_check) {
        const location_del = await prisma.blackList.delete({ where: { id: location_check.id } })
        if (location_del) {
            await Logger(`In database, deleted from blacklist user: ${location_del.id}-${location_del.idvk} by admin ${context.senderId}`)
            await context.send(`üîß –í—ã —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: https://vk.com/id${location_del.idvk} !`)
        }
    }
    return res
}

async function Location_Return(context: any, data: any, account: Account) {
    const res = { cursor: data.cursor, stop: true }
    await context.send(`üîß –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º.`)
    return res
}

async function Location_Select(context: any, data: any, account: Account) {
    const res = { cursor: data.cursor }
    await context.send(`üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å BUID${data.id_location} –≤ –≤–∞—à–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –µ–≥–æ –∞–Ω–∫–µ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤—è—Ç—Å—è —É –≤–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–∞!`)
    return res
}

async function Location_Next(context: any, data: any, account: Account) {
    const res = { cursor: data.cursor+5 }
    return res
}

async function Location_Back(context: any, data: any, account: Account) {
    const res = { cursor: data.cursor-5 }
    return res
}

async function Location_Create(context: any, data: any, account: Account) {
    const res = { cursor: data.cursor }
    let spec_check = false
    let name_loc = null
	while (spec_check == false) {
		const name = await context.question( `üß∑ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:`, timer_text)
		if (name.isTimeout) { return await context.send(`‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–° –∏—Å—Ç–µ–∫–ª–æ!`) }
		if (name.text.length <= 100) {
			
			name_loc = `${name.text}`
            console.log(name_loc)
            const target = await Parser_IDVK(name_loc)
            name_loc = target
            console.log(Number(target))
			if (!target) { await context.send(`‚ö† –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞/—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`); return res }
            const user: Account | null = await prisma.account.findFirst({ where: { idvk: Number(target) } })
            if (!user) { await context.send(`‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id${target} –µ—â–µ –Ω–µ —É—Å–ø–µ–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –°–ø—É—Ç–Ω–∏–∫–µ, –ø—Ä–∏–≤–µ–¥–∏—Ç–µ –Ω–µ–¥—Ä—É–≥–∞ –∫ –Ω–∞–º –∏ —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ!`); continue }
            const black_list_ch = await prisma.blackList.findFirst({ where: { id_account: account.id, idvk: Number(target) } })
            if (black_list_ch) { await context.send(`‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å https://vk.com/id${target} —É–∂–µ –≤ –≤–∞—à–µ–º —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ö–∞–∫ –±—ã –Ω–∏ —Ö–æ—Ç–µ–ª–æ—Å—å, –Ω–æ –¥–≤–∞–∂–¥—ã –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä—è–¥ –≤ –ß–° –Ω–µ –¥–æ–±–∞–≤–∏—à—å!`); continue }
            spec_check = true
		} else { await context.send(`üí° –í–≤–≤–µ–¥–∏—Ç–µ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ!`) }
	}
    if (name_loc) {
        const loc_cr = await prisma.blackList.create({ data: { idvk: Number(name_loc), id_account: account.id } })
        if (loc_cr) {
            await Logger(`In database, added new person BL: ${loc_cr.id}-${loc_cr.idvk} by admin ${context.senderId}`)
            await context.send(`üîß –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è https://vk.com/id${loc_cr.idvk}`)
        }
    }
    return res
}