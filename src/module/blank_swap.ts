import { Account, Blank } from "@prisma/client"
import { Confirm_User_Success, Logger, Send_Message } from "./helper"
import prisma from "./prisma"
import { abusivelist, Censored_Activation } from "./blacklist"
import { Keyboard } from "vk-io"

export async function Blank_Like(context: any, user_check: Account, selector: Blank, blank_build: any) {
    const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
	blank_build.splice(0, 1)
	await Send_Message(user_check.idvk, `‚úÖ –ê–Ω–∫–µ—Ç–∞ #${selector.id} –≤–∞–º –∑–∞—à–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –µ–≥–æ/–µ—ë –≤–ª–∞–¥–µ–ª—å—Ü—É.`)
	const user_nice = await prisma.account.findFirst({ where: { id: selector.id_account } })
	const user_blank = await prisma.blank.findFirst({ where: { id_account: user_check.id } })
	const mail_set = await prisma.mail.create({ data: { blank_to: selector.id, blank_from: user_blank?.id ?? 0 }})
	if (mail_set) { await Send_Message(user_nice?.idvk ?? user_check.idvk, `üîî –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ #${selector.id} –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–æ–º—É-—Ç–æ, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø–æ—á—Ç—É.`) }
	await Logger(`(private chat) ~ clicked swipe for <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
    
}
export async function Blank_Unlike(context: any, user_check: Account, selector: Blank, blank_build: any) {
    const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
	blank_build.splice(0, 1)
	await Send_Message(user_check.idvk, `‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É #${selector.id}.`)
	await Logger(`(private chat) ~ clicked unswipe for <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
}
export async function Blank_Report(context: any, user_check: Account, selector: Blank, blank_build: any) {
    const confirm: { status: boolean, text: String } = await Confirm_User_Success(context, `–≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É ‚Ññ${selector.id}?`)
    await context.send(`${confirm.text}`)
    if (!confirm.status) { return; }
	let ender2 = true
	let text_input = ``
	await Logger(`(private chat) ~ starting report writing on <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
	while (ender2) {
		let censored = user_check.censored ? await Censored_Activation(text_input) : text_input
		const corrected = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –æ—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù –£–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞: ${censored}`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
				.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
				.oneTime().inline()
			}
		)
		if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
			if (text_input.length < 10) { await context.send(`–ñ–∞–ª–æ–±—É –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
			if (text_input.length > 200) { await context.send(`–ñ–∞–ª–æ–±—É –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
			const report_set = await prisma.report.create({ data: { id_blank: selector.id, id_account: user_check.id, text: text_input }})
			await Logger(`(private chat) ~ report send about <blank> #${selector.id} by <user> ‚Ññ${context.senderId}`)
			await Send_Message(user_check.idvk, `‚úÖ –ú—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É #${selector.id}, —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–æ—Å!`)
			const user_warn = await prisma.account.findFirst({ where: { id: selector.id_account } })
			const counter_warn = await prisma.report.count({ where: { id_blank: selector.id, status: 'wait' } })
			if (!user_warn) { return }
			await Send_Message(user_warn.idvk, `‚úÖ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${selector.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã —Å–ª–µ–¥—É—é—â–µ–µ: [${report_set.text}]! –ñ–∞–ª–æ–± ${counter_warn}/3.`)
			if (counter_warn >= 3) {
				await prisma.blank.update({ where: { id: selector.id }, data: { banned: true } })
				await Send_Message(user_warn.idvk, `üö´ –ù–∞ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É #${selector.id} –¥–æ–Ω–µ—Å–ª–∏ –∫—Ä—ã—Å—ã ${counter_warn}/3. –ò–∑—ã–º–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞ –¥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏.`)
			}
			const blank_skip = await prisma.vision.create({ data: { id_account: user_check.id, id_blank: selector.id } })
			blank_build.splice(0, 1)
			ender2 = false
		} else {
			if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
				ender2 = false
			} else {
				text_input = corrected.text.replace(/[^–∞-—è–ê-–Ø0-9—ë–Å -+‚Äî‚Äì(){}[#‚Ññ\]=:;.,!?...]/gi, '')
			}
		}
	}
}

export async function Blank_Browser(context: any, user_check: Account) {
	let ender2 = true
	let text_input = ``
	const data = { text: '', status: false }
	await Logger(`(private chat) ~ starting browser writing prompt by <user> ‚Ññ${context.senderId}`)
	while (ender2) {
		let censored = user_check.censored ? await Censored_Activation(text_input) : text_input
		const corrected = await context.question(`üß∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã –æ—Ç 10 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤:\nüìù –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å: ${censored}`,
			{	
				keyboard: Keyboard.builder()
				.textButton({ label: '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', payload: { command: 'student' }, color: 'secondary' })
				.textButton({ label: '!–æ—Ç–º–µ–Ω–∞', payload: { command: 'citizen' }, color: 'secondary' })
				.oneTime().inline()
			}
		)
		if (corrected.text == '!—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
			if (text_input.length < 10) { await context.send(`–ü—Ä–æ–º–ø—Ç –æ—Ç 10 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
			if (text_input.length > 200) { await context.send(`–ü—Ä–æ–º–ø—Ç –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞–¥–æ!`); continue }
			ender2 = false
			data.status = true
			data.text = text_input
		} else {
			if (corrected.text == '!–æ—Ç–º–µ–Ω–∞') {
				ender2 = false
			} else {
				text_input = corrected.text.replace(/[^–∞-—è–ê-–Ø0-9—ë–Å -+‚Äî‚Äì(){}[#‚Ññ\]=:;.,!?...]/gi, '')
			}
		}
	}
	return data
}