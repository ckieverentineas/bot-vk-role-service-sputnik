import { Keyboard } from "vk-io";
import { users_pk as global_users_pk } from "..";
import prisma from "./prisma"

const caller = '[club226323522|@sputnikbot]'

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ö–º–µ—Ç—Ä–∞
interface PkUserData {
  idvk: number;
  authorTexts: Map<number, string>;
  authorMessageCounts: Map<number, number>;
  authorSentenceCounts: Map<number, number>;
  mode: boolean;
  text: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ö–º–µ—Ç—Ä–∞
interface PkMeterSettings {
  single_chars: boolean;
  single_chars_no_spaces: boolean;
  single_words: boolean;
  single_pk: boolean;
  single_mb: boolean;
  single_sentences: boolean;
  single_post_percent: boolean;
  single_comment_percent: boolean;
  single_discussion_percent: boolean;
  multi_chars: boolean;
  multi_chars_no_spaces: boolean;
  multi_words: boolean;
  multi_pk: boolean;
  multi_mb: boolean;
  multi_sentences: boolean;
  multi_message_count: boolean;
  multi_sentence_count: boolean;
}

let users_pk: PkUserData[] = [];

export async function Counter_PK_Module(context: any) {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
  await User_Pk_Init(context);
  const id = await User_Pk_Get(context);

  if (id == null) { 
    return false; 
  }

  // –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• PAYLOAD –ö–û–ú–ê–ù–î
  if (await handleAllPayloadCommands(context)) {
    return true;
  }

  // –û–ë–†–ê–ë–û–¢–ö–ê PAYLOAD
  if (context.eventPayload) {
    const payload = context.eventPayload;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ö–º–µ—Ç—Ä–∞
    if (payload.command && (
        payload.command.startsWith('pk_settings_') || 
        payload.command.startsWith('pk_toggle_') || 
        payload.command === 'activate_pk' || 
        payload.command === 'finish_pk' || 
        payload.command === 'reset_pk' || 
        payload.command === 'pk_settings_guide'
    )) {
      await handlePkSettingsPayload(context, payload.command);
      return true;
    }
  }

  // –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö –ë–ï–ó PAYLOAD
  if (context.text) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É !–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (context.text == `!–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏` || context.text == `${caller} !–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏`) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –ü–ö–º–µ—Ç—Ä–∞
      if (users_pk[id].mode) {
        await context.send({
          message: `‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–º–µ—Ä –ü–ö, –Ω–∞–∂–∞–≤ !–∫–æ–Ω—á–∏—Ç—å, –∑–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ !–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏`,
          keyboard: Keyboard.builder()
            .textButton({ label: '!–∫–æ–Ω—á–∏—Ç—å', payload: { command: 'finish_pk' }, color: 'negative' }).row()
            .oneTime().inline()
        });
        return true;
      }
      await showPkSettingsMenu(context);
      return true;
    }

    if (context.text == `üöÄ –ö–æ—Å–º–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è` || context.text == `${caller} üöÄ –ö–æ—Å–º–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è`) {
      await showPkGuide(context);
      return true;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const settings = await getUserPkSettings(context.senderId);
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (context.text == `üë• –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–≤–∏–∫–æ–≤`) {
      await showMultiSettingsMenu(context);
      return true;
    }
    
    if (context.text == `üìä –î–ª—è –æ–¥–Ω–æ–≥–æ —Ä–æ–ª–µ–≤–∏–∫–∞`) {
      await showSingleSettingsMenu(context);
      return true;
    }
    
    if (context.text == `üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º`) {
      await resetPkSettings(context.senderId);
      await context.send({
        message: '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö–º–µ—Ç—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º',
        keyboard: Keyboard.builder()
          .textButton({ label: '!–ø–∫–º–µ—Ç—Ä', payload: { command: 'activate_pk' }, color: 'positive' }).row()
          .textButton({ label: '!–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', payload: { command: 'pk_settings_main' }, color: 'primary' }).row()
          .oneTime().inline()
      });
      return true;
    }
    
    if (context.text == `‚ùå –û—Ç–º–µ–Ω–∞`) {
      await context.send({
        message: '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö–º–µ—Ç—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã',
        keyboard: Keyboard.builder()
          .textButton({ label: '!–ø–∫–º–µ—Ç—Ä', payload: { command: 'activate_pk' }, color: 'positive' }).row()
          .textButton({ label: '!—Å–ø—É—Ç–Ω–∏–∫', payload: { command: 'sputnik_menu' }, color: 'primary' }).row()
          .oneTime().inline()
      });
      return true;
    }
    
    if (context.text == `üîô –ù–∞–∑–∞–¥`) {
      await showPkSettingsMenu(context);
      return true;
    }

    if (context.text == `üöÄ –ö–æ—Å–º–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è` || context.text == `${caller} üöÄ –ö–æ—Å–º–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è`) {
      await showPkGuide(context);
      return true;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (context.text.startsWith('‚úÖ') || context.text.startsWith('‚ùå')) {
      const text = context.text.replace(/[‚úÖ‚ùå]/g, '').trim();
      
      // –î–ª—è –æ–¥–Ω–æ–≥–æ —Ä–æ–ª–µ–≤–∏–∫–∞
      if (text === '–°–∏–º–≤–æ–ª—ã') {
        await toggleSetting(context, 'single_chars');
        return true;
      }
      if (text === '–°–∏–º–≤. –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤') {
        await toggleSetting(context, 'single_chars_no_spaces');
        return true;
      }
      if (text === '–°–ª–æ–≤–∞') {
        await toggleSetting(context, 'single_words');
        return true;
      }
      if (text === '–ü–ö') {
        await toggleSetting(context, 'single_pk');
        return true;
      }
      if (text === '–ú–ë') {
        await toggleSetting(context, 'single_mb');
        return true;
      }
      if (text === '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è') {
        await toggleSetting(context, 'single_sentences');
        return true;
      }
      if (text === '% –ü–æ—Å—Ç–∞') {
        await toggleSetting(context, 'single_post_percent');
        return true;
      }
      if (text === '% –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è') {
        await toggleSetting(context, 'single_comment_percent');
        return true;
      }
      if (text === '% –û–±—Å—É–∂–¥–µ–Ω–∏—è') {
        await toggleSetting(context, 'single_discussion_percent');
        return true;
      }
      
      // –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–≤–∏–∫–æ–≤ (—Ç—É—Ç –º–∞—Ö–∏–Ω–∞—Ü–∏–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏)
      if (text === '–ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π') {
        await toggleSetting(context, 'multi_message_count');
        return true;
      }
      if (text === '–°–∏–º–≤o–ª—ã') {
        await toggleSetting(context, 'multi_chars');
        return true;
      }
      if (text === '–°–∏–º–≤. –±–µ–∑ –ø—Äo–±–µ–ª–æ–≤') {
        await toggleSetting(context, 'multi_chars_no_spaces');
        return true;
      }
      if (text === '–°–ªo–≤–∞') {
        await toggleSetting(context, 'multi_words');
        return true;
      }
      if (text === '–ü—Ä–µ–¥–ªo–∂–µ–Ω–∏—è') {
        await toggleSetting(context, 'multi_sentences');
        return true;
      }
      if (text === '–üK') {
        await toggleSetting(context, 'multi_pk');
        return true;
      }
      if (text === 'M–ë') {
        await toggleSetting(context, 'multi_mb');
        return true;
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –ü–ö–º–µ—Ç—Ä–∞
    if (context.text == `!–ø–∫–º–µ—Ç—Ä` || context.text == `üìê –ü–∫–º–µ—Ç—Ä`) {
      users_pk[id].mode = true;
      users_pk[id].authorTexts = new Map();
      users_pk[id].authorMessageCounts = new Map();
      users_pk[id].authorSentenceCounts = new Map();
      users_pk[id].text = ``;
      await context.send({
        message: `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞ –ü–ö. –í–≤–æ–¥–∏—Ç–µ –†–ü –ø–æ—Å—Ç—ã –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω—ã, –∫–∞–∫–∞—è –Ω—É–∂–Ω–∞ –≤–∞–º! –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ !–∫–æ–Ω—á–∏—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ !–æ–±–Ω—É–ª–∏—Ç—å\n\nüì® –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!\n\n‚öôÔ∏è –î–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–º–µ—Ä, –Ω–∞–∂–∞–≤ !–∫–æ–Ω—á–∏—Ç—å)`,
        keyboard: Keyboard.builder()
          .textButton({ label: '!–∫–æ–Ω—á–∏—Ç—å', payload: { command: 'finish_pk' }, color: 'negative' }).row()
          .oneTime().inline()
      });
      return true;
    }

    if (context.text == `!–æ–±–Ω—É–ª–∏—Ç—å` || context.text == `${caller} !–æ–±–Ω—É–ª–∏—Ç—å`) {
      if (!users_pk[id].mode) {
        await context.send({
          message: `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è! –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ !–ø–∫–º–µ—Ç—Ä –∑–∞–Ω–æ–≤–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–¥—Å—á–µ—Ç–∞.`,
          keyboard: Keyboard.builder()
            .textButton({ label: '!–ø–∫–º–µ—Ç—Ä', payload: { command: 'activate_pk' }, color: 'positive' }).row()
            .oneTime().inline()
        });
        return true;
      }
      
      users_pk[id].authorTexts = new Map();
      users_pk[id].authorMessageCounts = new Map();
      users_pk[id].authorSentenceCounts = new Map();
      users_pk[id].text = ``;
      await context.send(`üóë –û–±–Ω—É–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ—Ä–∞ –ü–ö`);
      return true;
    }

    if (context.text == `!–∫–æ–Ω—á–∏—Ç—å` || context.text == `${caller} !–∫–æ–Ω—á–∏—Ç—å`) {
      if (!users_pk[id].mode) {
        await context.send({
          message: `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è! –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –±—ã–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ !–ø–∫–º–µ—Ç—Ä –∑–∞–Ω–æ–≤–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–¥—Å—á–µ—Ç–∞.`,
          keyboard: Keyboard.builder()
            .textButton({ label: '!–ø–∫–º–µ—Ç—Ä', payload: { command: 'activate_pk' }, color: 'positive' }).row()
            .oneTime().inline()
        });
        return true;
      }
      
      users_pk[id].mode = false;
      users_pk[id].authorTexts = new Map();
      users_pk[id].authorMessageCounts = new Map();
      users_pk[id].authorSentenceCounts = new Map();
      users_pk[id].text = ``;
      await context.send({
        message: `‚õîÔ∏è –û–±–Ω—É–ª–µ–Ω –∏ –≤—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞ –ü–ö`,
        keyboard: Keyboard.builder()
          .textButton({ label: '!–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', payload: { command: 'pk_settings_main' }, color: 'primary' }).row()
          .textButton({ label: '!—Å–ø—É—Ç–Ω–∏–∫', payload: { command: 'sputnik_menu' }, color: 'primary' }).row()
          .oneTime().inline()
      });
      return true;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –ü–ö–º–µ—Ç—Ä–∞
  if (context.isOutbox == false && context.senderId > 0 && users_pk[id].mode) {
    let hasText = false;

    // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (context.text && typeof context.text === 'string' && context.text.trim().length > 0) {
      users_pk[id].text += context.text;
      addTextToAuthor(users_pk[id], context.senderId, context.text);
      incrementMessageCount(users_pk[id], context.senderId);
      hasText = true;
    }

    // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (context.hasForwards) {
      try {
        const messageInfo = await context.api.messages.getById({
          message_ids: [context.id],
          extended: 1
        });

        if (messageInfo.items && messageInfo.items[0]) {
          const mainMessage = messageInfo.items[0];
          const allForwardedMessages = extractAllForwardedMessages(mainMessage);
          
          for (const fwdMessage of allForwardedMessages) {
            if (fwdMessage.text && fwdMessage.text.trim().length > 0) {
              users_pk[id].text += fwdMessage.text;
              addTextToAuthor(users_pk[id], fwdMessage.from_id, fwdMessage.text);
              incrementMessageCount(users_pk[id], fwdMessage.from_id);
              hasText = true;
            }
          }
        }
      } catch (error) {
        // Fallback
        if (context.forwards && context.forwards.length > 0) {
          for (const forward of context.forwards) {
            if (forward.text && typeof forward.text === 'string' && forward.text.trim().length > 0) {
              users_pk[id].text += forward.text;
              addTextToAuthor(users_pk[id], forward.senderId, forward.text);
              incrementMessageCount(users_pk[id], forward.senderId);
              hasText = true;
            }
          }
        }
      }
    }

    // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –±—ã–ª —Å–æ–±—Ä–∞–Ω, –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (hasText) {
      await sendPkStatistics(context, users_pk[id]);
    }
    return true;
  }

  return false;
}

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –í–°–ï–• PAYLOAD –ö–û–ú–ê–ù–î
async function handleAllPayloadCommands(context: any) {
  if (!context.eventPayload?.command) {
    return false;
  }
  
  const payload = context.eventPayload;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ü–ö–º–µ—Ç—Ä–∞
  if (payload.command.startsWith('pk_') || 
      payload.command === 'activate_pk' || 
      payload.command === 'finish_pk' || 
      payload.command === 'reset_pk' ||
      payload.command === 'pk_settings_guide') {
    await handlePkSettingsPayload(context, payload.command);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function incrementMessageCount(pkUserData: PkUserData, authorId: number) {
  const currentCount = pkUserData.authorMessageCounts.get(authorId) || 0;
  pkUserData.authorMessageCounts.set(authorId, currentCount + 1);
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –í–°–ï–• –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ü–µ–ø–æ—á–∫–∏
function extractAllForwardedMessages(message: any): any[] {
  const allMessages: any[] = [];
  
  if (message.fwd_messages && Array.isArray(message.fwd_messages)) {
    for (const fwdMsg of message.fwd_messages) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      allMessages.push(fwdMsg);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (fwdMsg.fwd_messages && fwdMsg.fwd_messages.length > 0) {
        const nestedMessages = extractAllForwardedMessages(fwdMsg);
        allMessages.push(...nestedMessages);
      }
    }
  }
  
  return allMessages;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫ –∞–≤—Ç–æ—Ä—É
function addTextToAuthor(pkUserData: PkUserData, authorId: number, text: string) {
  const currentText = pkUserData.authorTexts.get(authorId) || "";
  const newText = currentText + (currentText ? " " : "") + text.trim();
  pkUserData.authorTexts.set(authorId, newText);
  return newText.length;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function sendPkStatistics(context: any, pkUserData: PkUserData) {
  const sentences = pkUserData.text.match(/[^.!?]+[.!?]+/g);
  const lines = sentences ? sentences.length : 0;

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const settings = await getUserPkSettings(context.senderId);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–æ–≤
  const authorEntries = Array.from(pkUserData.authorTexts.entries());
  const isMultiAuthor = authorEntries.length > 1;
  
  // –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  let baseMessage = `üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è [${sentences ? sentences[0] : ''} <--...--> ${sentences && sentences.length > 1 ? sentences[sentences.length-1] : ''}]:\n`;
  
  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö, –∏–Ω–∞—á–µ - –¥–ª—è –æ–¥–Ω–æ–≥–æ
  if (isMultiAuthor) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–≤–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    const stats = [];
    
    if (settings.multi_chars) stats.push(`üìù C–∏–º–≤–æ–ª–æ–≤: ${pkUserData.text.length}`);
    if (settings.multi_chars_no_spaces) stats.push(`üìù C–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ${await countWords(pkUserData.text)}`);
    if (settings.multi_words) stats.push(`üìù C–ª–æ–≤: ${await countWords2(pkUserData.text)}`);
    if (settings.multi_sentences) stats.push(`üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${lines}`);
    if (settings.multi_pk) stats.push(`üíª –ü–ö: ${(pkUserData.text.length/102).toFixed(2)}`);
    if (settings.multi_mb) stats.push(`üì± –ú–ë: ${(pkUserData.text.length/35).toFixed(2)}`);
    
    baseMessage += stats.join('\n');
  } else {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–æ–ª–µ–≤–∏–∫–∞
    const stats = [];
    
    if (settings.single_chars) stats.push(`üìï C–∏–º–≤–æ–ª–æ–≤: ${pkUserData.text.length}`);
    if (settings.single_chars_no_spaces) stats.push(`üìô C–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ${await countWords(pkUserData.text)}`);
    if (settings.single_words) stats.push(`üìó C–ª–æ–≤: ${await countWords2(pkUserData.text)}`);
    if (settings.single_pk) stats.push(`üíª –ü–ö: ${(pkUserData.text.length/102).toFixed(2)}`);
    if (settings.single_mb) stats.push(`üì± –ú–ë: ${(pkUserData.text.length/35).toFixed(2)}`);
    if (settings.single_sentences) stats.push(`‚úèÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${lines}`);
    if (settings.single_post_percent) stats.push(`üì∞ –ü–æ—Å—Ç: ${(pkUserData.text.length/16384*100).toFixed(2)}%`);
    if (settings.single_comment_percent) stats.push(`üìß –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${(pkUserData.text.length/280*100).toFixed(2)}% / ${(pkUserData.text.length/16384*100).toFixed(2)}% (rec/max)`);
    if (settings.single_discussion_percent) stats.push(`üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ: ${(pkUserData.text.length/4096*100).toFixed(2)}%`);
    
    baseMessage += stats.join('\n');
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä–∞–º (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
  const authorStats = [];
  
  for (const [authorId, text] of authorEntries) {
    const wordCount = await countWords2(text);
    const authorSentences = text.match(/[^.!?]+[.!?]+/g);
    const messageCount = pkUserData.authorMessageCounts.get(authorId) || 0;
    const sentenceCount = authorSentences ? authorSentences.length : 0;
    
    authorStats.push({
      id: authorId,
      text: text,
      charCount: text.length,
      wordCount: wordCount,
      sentenceCount: sentenceCount,
      pk: (text.length/102).toFixed(2),
      mb: (text.length/35).toFixed(2),
      messageCount: messageCount
    });
  }

  if (isMultiAuthor) {
    baseMessage += `\n\nüë• –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–û–õ–ï–í–ò–ö–ê–ú:\n`;
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Ñ–∞–º–∏–ª–∏—è–º–∏
    const authorLines = [];
    for (const author of authorStats) {
      try {
        const userInfo = await context.api.users.get({ user_ids: [author.id] });
        const userName = userInfo[0] ? 
          `[id${author.id}|${userInfo[0].first_name} ${userInfo[0].last_name}]` : 
          `id${author.id}`;
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const authorStatsLines = [];
        if (settings.multi_message_count) authorStatsLines.push(`   üì® –°–æ–æ–±—â–µ–Ω–∏–π: ${author.messageCount}`);
        if (settings.multi_chars) authorStatsLines.push(`   üìù –°–∏–º–≤–æ–ª–æ–≤: ${author.charCount}`);
        if (settings.multi_chars_no_spaces) authorStatsLines.push(`   üìù –°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ${await countWords(author.text)}`);
        if (settings.multi_words) authorStatsLines.push(`   üìù –°–ª–æ–≤: ${author.wordCount}`);
        if (settings.multi_sentences) authorStatsLines.push(`   üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${author.sentenceCount}`);
        if (settings.multi_pk) authorStatsLines.push(`   üíª –ü–ö: ${author.pk}`);
        if (settings.multi_mb) authorStatsLines.push(`   üì± –ú–ë: ${author.mb}`);
        
        const authorLine = `üë§ ${userName}:\n${authorStatsLines.join('\n')}\n`;
        authorLines.push(authorLine);
      } catch (error) {
        // Fallback
        const authorStatsLines = [];
        if (settings.multi_message_count) authorStatsLines.push(`   üì® –°–æ–æ–±—â–µ–Ω–∏–π: ${author.messageCount}`);
        if (settings.multi_chars) authorStatsLines.push(`   üìù –°–∏–º–≤–æ–ª–æ–≤: ${author.charCount}`);
        if (settings.multi_chars_no_spaces) authorStatsLines.push(`   üìù –°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ${await countWords(author.text)}`);
        if (settings.multi_words) authorStatsLines.push(`   üìù –°–ª–æ–≤: ${author.wordCount}`);
        if (settings.multi_sentences) authorStatsLines.push(`   üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${author.sentenceCount}`);
        if (settings.multi_pk) authorStatsLines.push(`   üíª –ü–ö: ${author.pk}`);
        if (settings.multi_mb) authorStatsLines.push(`   üì± –ú–ë: ${author.mb}`);
        
        const authorLine = `üë§ id${author.id}:\n${authorStatsLines.join('\n')}\n`;
        authorLines.push(authorLine);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    let fullMessage = baseMessage;
    for (const authorLine of authorLines) {
      const potentialMessage = fullMessage + '\n' + authorLine;
      if (potentialMessage.length > 4000) {
        await context.send(fullMessage + '\n\n... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ...');
        fullMessage = authorLine;
      } else {
        fullMessage = potentialMessage;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    fullMessage += `\nüìä –í—Å–µ–≥–æ —Ä–æ–ª–µ–≤–∏–∫–æ–≤: ${authorStats.length}`;
    await context.send(fullMessage, {
      keyboard: Keyboard.builder()
        .textButton({ label: '!–æ–±–Ω—É–ª–∏—Ç—å', payload: { command: 'reset_pk' }, color: 'positive' }).row()
        .textButton({ label: '!–∫–æ–Ω—á–∏—Ç—å', payload: { command: 'finish_pk' }, color: 'negative' }).row()
        .oneTime().inline(),
    });
    
  } else {
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–≤—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await context.send(baseMessage, {
      keyboard: Keyboard.builder()
        .textButton({ label: '!–æ–±–Ω—É–ª–∏—Ç—å', payload: { command: 'reset_pk' }, color: 'positive' }).row()
        .textButton({ label: '!–∫–æ–Ω—á–∏—Ç—å', payload: { command: 'finish_pk' }, color: 'negative' }).row()
        .oneTime().inline(),
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function showPkSettingsMenu(context: any) {
  await context.send({
    message: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö–º–µ—Ç—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:`,
    keyboard: Keyboard.builder()
      .textButton({ label: 'üìä –î–ª—è –æ–¥–Ω–æ–≥–æ —Ä–æ–ª–µ–≤–∏–∫–∞', payload: { command: 'pk_settings_single' }, color: 'primary' }).row()
      .textButton({ label: 'üë• –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–≤–∏–∫–æ–≤', payload: { command: 'pk_settings_multi' }, color: 'primary' }).row()
      .textButton({ label: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º', payload: { command: 'pk_settings_reset' }, color: 'secondary' }).row()
      .textButton({ label: 'üöÄ –ö–æ—Å–º–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', payload: { command: 'pk_settings_guide' }, color: 'secondary' }).row()
      .textButton({ label: '‚ùå –û—Ç–º–µ–Ω–∞', payload: { command: 'pk_settings_cancel' }, color: 'negative' }).row()
      .oneTime().inline()
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handlePkSettingsPayload(context: any, command: string) {
  console.log('handlePkSettingsPayload –≤—ã–∑–≤–∞–Ω–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π:', command);
  const userId = context.senderId;
  
  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  await User_Pk_Init(context);
  const id = await User_Pk_Get(context);
  
  try {
    switch (command) {
      case 'pk_settings_single':
        await showSingleSettingsMenu(context);
        break;
      case 'pk_settings_multi':
        await showMultiSettingsMenu(context);
        break;
      case 'pk_settings_reset':
        await resetPkSettings(userId);
        await context.send({
          message: '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–ö–º–µ—Ç—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º',
          keyboard: Keyboard.builder()
            .textButton({ label: '!–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', payload: { command: 'pk_settings_main' }, color: 'primary' }).row()
            .oneTime().inline()
        });
        break;
      case 'pk_settings_cancel':
        await context.send({
          message: '‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã',
          keyboard: Keyboard.builder()
            .textButton({ label: '!–ø–∫–º–µ—Ç—Ä', payload: { command: 'activate_pk' }, color: 'positive' }).row()
            .textButton({ label: '!—Å–ø—É—Ç–Ω–∏–∫', payload: { command: 'sputnik_menu' }, color: 'primary' }).row()
            .oneTime().inline()
        });
        break;
      case 'pk_toggle_single_chars':
        await toggleSetting(context, 'single_chars');
        break;
      case 'pk_toggle_single_chars_no_spaces':
        await toggleSetting(context, 'single_chars_no_spaces');
        break;
      case 'pk_toggle_single_words':
        await toggleSetting(context, 'single_words');
        break;
      case 'pk_toggle_single_pk':
        await toggleSetting(context, 'single_pk');
        break;
      case 'pk_toggle_single_mb':
        await toggleSetting(context, 'single_mb');
        break;
      case 'pk_toggle_single_sentences':
        await toggleSetting(context, 'single_sentences');
        break;
      case 'pk_toggle_single_post_percent':
        await toggleSetting(context, 'single_post_percent');
        break;
      case 'pk_toggle_single_comment_percent':
        await toggleSetting(context, 'single_comment_percent');
        break;
      case 'pk_toggle_single_discussion_percent':
        await toggleSetting(context, 'single_discussion_percent');
        break;
      case 'pk_toggle_multi_message_count':
        await toggleSetting(context, 'multi_message_count');
        break;
      case 'pk_toggle_multi_chars':
        await toggleSetting(context, 'multi_chars');
        break;
      case 'pk_toggle_multi_chars_no_spaces':
        await toggleSetting(context, 'multi_chars_no_spaces');
        break;
      case 'pk_toggle_multi_words':
        await toggleSetting(context, 'multi_words');
        break;
      case 'pk_toggle_multi_sentences':
        await toggleSetting(context, 'multi_sentences');
        break;
      case 'pk_toggle_multi_pk':
        await toggleSetting(context, 'multi_pk');
        break;
      case 'pk_toggle_multi_mb':
        await toggleSetting(context, 'multi_mb');
        break;
      case 'pk_settings_guide':
        await showPkGuide(context);
        break;
      case 'pk_settings_main':
        await showPkSettingsMenu(context);
        break;
      case 'pk_settings_back':
        await showPkSettingsMenu(context);
        break;
      case 'activate_pk':
        if (id !== null) {
          users_pk[id].mode = true;
          users_pk[id].authorTexts = new Map();
          users_pk[id].authorMessageCounts = new Map();
          users_pk[id].authorSentenceCounts = new Map();
          users_pk[id].text = ``;
          await context.send({
            message: `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞ –ü–ö. –í–≤–æ–¥–∏—Ç–µ –†–ü –ø–æ—Å—Ç—ã –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω—ã, –∫–∞–∫–∞—è –Ω—É–∂–Ω–∞ –≤–∞–º! –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ !–∫–æ–Ω—á–∏—Ç—å, —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ !–æ–±–Ω—É–ª–∏—Ç—å\n\nüì® –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!\n\n‚öôÔ∏è –î–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–º–µ—Ä, –Ω–∞–∂–∞–≤ !–∫–æ–Ω—á–∏—Ç—å)`,
            keyboard: Keyboard.builder()
              .textButton({ label: '!–∫–æ–Ω—á–∏—Ç—å', payload: { command: 'finish_pk' }, color: 'negative' }).row()
              .textButton({ label: '!–æ–±–Ω—É–ª–∏—Ç—å', payload: { command: 'reset_pk' }, color: 'secondary' }).row()
              .oneTime().inline()
          });
        }
        break;
      case 'finish_pk':
        if (id !== null && users_pk[id].mode) {
          users_pk[id].mode = false;
          users_pk[id].authorTexts = new Map();
          users_pk[id].authorMessageCounts = new Map();
          users_pk[id].authorSentenceCounts = new Map();
          users_pk[id].text = ``;
          await context.send({
            message: `‚õîÔ∏è –û–±–Ω—É–ª–µ–Ω –∏ –≤—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞ –ü–ö`,
            keyboard: Keyboard.builder()
              .textButton({ label: '!–ø–∫–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', payload: { command: 'pk_settings_main' }, color: 'primary' }).row()
              .textButton({ label: '!—Å–ø—É—Ç–Ω–∏–∫', payload: { command: 'sputnik_menu' }, color: 'primary' }).row()
              .oneTime().inline()
          });
        } else {
          await context.send(`‚ÑπÔ∏è –†–µ–∂–∏–º –ü–ö–º–µ—Ç—Ä–∞ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω`);
        }
        break;
      case 'reset_pk':
        if (id !== null && users_pk[id].mode) {
          users_pk[id].authorTexts = new Map();
          users_pk[id].authorMessageCounts = new Map();
          users_pk[id].authorSentenceCounts = new Map();
          users_pk[id].text = ``;
          await context.send(`üóë –û–±–Ω—É–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ—Ä–∞ –ü–ö`);
        } else {
          await context.send(`‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ä–µ–∂–∏–º –ü–ö–º–µ—Ç—Ä–∞`);
        }
        break;
      default:
        await context.send(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ü–ö–º–µ—Ç—Ä–∞ ${command}:`, error);
    await context.send(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã`);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async function showPkGuide(context: any) {
  await context.send({
    message: `üöÄ –ö–û–°–ú–û–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ü–ö–ú–ï–¢–†–£

üì° –ß–¢–û –¢–ê–ö–û–ï –ü–ö–ú–ï–¢–†?
–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –ª–µ–≥–∫–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å—Ç—Ä–æ—á–µ–∫ –≤ —Ä–æ–ª–µ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö (–æ—Ç—Å—é–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ), –Ω–æ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—é–±—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!

üõ∞ –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø?
1. –ñ–º–µ—Ç–µ !–ø–∫–º–µ—Ç—Ä ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞
2. –ü—Ä–∏—Å—ã–ª–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å—Ç/—Ç–µ–∫—Å—Ç (–ø–∏—à–µ—Ç–µ, –≤—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ)
3. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
4. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–º–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äî –∂–º–µ—Ç–µ !–æ–±–Ω—É–ª–∏—Ç—å –∏ —Å—Ä–∞–∑—É –≤–∫–∏–¥—ã–≤–∞–µ—Ç–µ –Ω–æ–≤—ã–π
5. !–∫–æ–Ω—á–∏—Ç—å ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∑–∞–º–µ—Ä–∞

‚ö° –ß–¢–û –ó–ê –ü–ö –∏ –ú–ë?
‚Ä¢ üíª –ü–ö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –≤–∞—à–∏—Ö —Ä–æ–ª–µ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö (102 —Å–∏–º–≤–æ–ª–∞ = 1 –ü–ö)
‚Ä¢ üì± –ú–ë ‚Äî –º–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (35 —Å–∏–º–≤–æ–ª–æ–≤ = 1 –ú–ë)

üìä –ü–†–û–¶–ï–ù–¢–´ ‚Äî –≠–¢–û –õ–ò–ú–ò–¢–´
‚Ä¢ % –ü–æ—Å—Ç–∞/–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è/–û–±—Å—É–∂–¥–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ % –æ—Ç –ª–∏–º–∏—Ç–∞ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏, —Ç.–µ. –≤–ª–µ–∑–µ—Ç –ª–∏ –≤–∞—à –ø–æ—Å—Ç –≤ –ª–∏–º–∏—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ 100% = –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
‚Ä¢ –ú–µ–Ω—å—à–µ 100% = –≤–∞—à –ø–æ—Å—Ç –≤–ª–µ–∑–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç
‚Ä¢ –ë–æ–ª—å—à–µ 100% = –Ω–µ –≤–ª–µ–∑–µ—Ç, –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—â–∞—Ç—å

üë§ –î–õ–Ø 1 –†–û–õ–ï–í–ò–ö–ê vs üë• –î–õ–Ø –ù–ï–°–ö–û–õ–¨–ö–ò–•
‚Ä¢ –î–ª—è 1 —Ä–æ–ª–µ–≤–∏–∫–∞ ‚Äî –∫–æ–≥–¥–∞ —Å–∫–∏–¥—ã–≤–∞–µ—Ç–µ –ø–æ—Å—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö ‚Äî –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Ü–µ–ø–æ—á–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (–¥–∞–∂–µ –ø–µ—Ä–µ—Å—ã–ª –ø–µ—Ä–µ—Å—ã–ª–∞ –±–æ—Ç —Å–æ–∂—Ä–µ—Ç).
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞, –∞ –º–æ–∂–Ω–æ ‚Äî –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ!

üõ∏ –ü–û–ì–†–ï–®–ù–û–°–¢–ò
–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (1-2%) ‚Äî –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.

üí´ –í–ê–®–ò –ò–î–ï–ò
–ï—Å—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é? –ü–∏—à–∏—Ç–µ —Å—é–¥–∞ (https://vk.com/topic-226040488_51594062) ‚Äî –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã!

üåå –ü–û–î–î–ï–†–ñ–ê–¢–¨ –†–ê–ó–†–ê–ë–û–¢–ö–£
–°–ø—É—Ç–Ω–∏–∫ –ª–µ—Ç–∞–µ—Ç –Ω–∞ —á–∏—Å—Ç–æ–º —ç–Ω—Ç—É–∑–∏–∞–∑–º–µ, –Ω–æ –¥–∞–∂–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∞–ø–ø–∞—Ä–∞—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –∑–∞–ø—Ä–∞–≤–∫–µ. –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–∫–ª–µ–∏–ª –ø–∏–∫—Å–µ–ª–∏ –æ—Ç –Ω–µ–¥–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è? –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É! –î–æ–Ω–∞—Ç–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–∞–º –ø–æ–∏—Å–∫–∞ —Å–æ—Ä–æ–ª–µ–≤–∏–∫–æ–≤
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ—Ç–∫–ª–∏–∫—É –Ω–∞ –∞–Ω–∫–µ—Ç—É

üí≥ –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–æ–Ω–∞—Ç–∞ –º–æ–∂–Ω–æ –≤ –≥—Ä—É–ø–ø–µ –°–ø—É—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (—É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≥—Ä—É–ø–ø—ã) –Ω–∞–ø—Ä—è–º—É—é.`,

    keyboard: Keyboard.builder()
      .textButton({ label: 'üîô –ù–∞–∑–∞–¥', payload: { command: 'pk_settings_back' }, color: 'secondary' }).row()
      .oneTime().inline()
  });
}

// –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–æ–ª–µ–≤–∏–∫–∞
async function showSingleSettingsMenu(context: any) {
  const settings = await getUserPkSettings(context.senderId);
  
  await context.send({
    message: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –û–î–ù–û–ì–û —Ä–æ–ª–µ–≤–∏–∫–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:`,
    keyboard: Keyboard.builder()
      .textButton({ 
        label: `${settings.single_chars ? '‚úÖ' : '‚ùå'} –°–∏–º–≤–æ–ª—ã`, 
        payload: { command: 'pk_toggle_single_chars' }, 
        color: settings.single_chars ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.single_chars_no_spaces ? '‚úÖ' : '‚ùå'} –°–∏–º–≤. –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤`, 
        payload: { command: 'pk_toggle_single_chars_no_spaces' }, 
        color: settings.single_chars_no_spaces ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.single_words ? '‚úÖ' : '‚ùå'} –°–ª–æ–≤–∞`, 
        payload: { command: 'pk_toggle_single_words' }, 
        color: settings.single_words ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.single_sentences ? '‚úÖ' : '‚ùå'} –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`, 
        payload: { command: 'pk_toggle_single_sentences' }, 
        color: settings.single_sentences ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.single_mb ? '‚úÖ' : '‚ùå'} –ú–ë`, 
        payload: { command: 'pk_toggle_single_mb' }, 
        color: settings.single_mb ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.single_pk ? '‚úÖ' : '‚ùå'} –ü–ö`, 
        payload: { command: 'pk_toggle_single_pk' }, 
        color: settings.single_pk ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.single_post_percent ? '‚úÖ' : '‚ùå'} % –ü–æ—Å—Ç–∞`, 
        payload: { command: 'pk_toggle_single_post_percent' }, 
        color: settings.single_post_percent ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.single_comment_percent ? '‚úÖ' : '‚ùå'} % –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è`, 
        payload: { command: 'pk_toggle_single_comment_percent' }, 
        color: settings.single_comment_percent ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.single_discussion_percent ? '‚úÖ' : '‚ùå'} % –û–±—Å—É–∂–¥–µ–Ω–∏—è`, 
        payload: { command: 'pk_toggle_single_discussion_percent' }, 
        color: settings.single_discussion_percent ? 'positive' : 'negative' 
      })
      .textButton({ label: 'üîô –ù–∞–∑–∞–¥', payload: { command: 'pk_settings_back' }, color: 'secondary' }).row()
      .oneTime().inline()
  });
}

// –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–æ–ª–µ–≤–∏–∫–æ–≤ (—Å–Ω–æ–≤–∞ —Ñ–æ–∫—É—Å—ã)
async function showMultiSettingsMenu(context: any) {
  const settings = await getUserPkSettings(context.senderId);
  
  await context.send({
    message: `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ù–ï–°–ö–û–õ–¨–ö–ò–• —Ä–æ–ª–µ–≤–∏–∫–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ:`,
    keyboard: Keyboard.builder()
      .textButton({ 
        label: `${settings.multi_chars ? '‚úÖ' : '‚ùå'} –°–∏–º–≤o–ª—ã`, 
        payload: { command: 'pk_toggle_multi_chars' }, 
        color: settings.multi_chars ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.multi_chars_no_spaces ? '‚úÖ' : '‚ùå'} –°–∏–º–≤. –±–µ–∑ –ø—Äo–±–µ–ª–æ–≤`, 
        payload: { command: 'pk_toggle_multi_chars_no_spaces' }, 
        color: settings.multi_chars_no_spaces ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.multi_words ? '‚úÖ' : '‚ùå'} –°–ªo–≤–∞`, 
        payload: { command: 'pk_toggle_multi_words' }, 
        color: settings.multi_words ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.multi_sentences ? '‚úÖ' : '‚ùå'} –ü—Ä–µ–¥–ªo–∂–µ–Ω–∏—è`, 
        payload: { command: 'pk_toggle_multi_sentences' }, 
        color: settings.multi_sentences ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.multi_mb ? '‚úÖ' : '‚ùå'} M–ë`, 
        payload: { command: 'pk_toggle_multi_mb' }, 
        color: settings.multi_mb ? 'positive' : 'negative' 
      })
      .textButton({ 
        label: `${settings.multi_pk ? '‚úÖ' : '‚ùå'} –üK`, 
        payload: { command: 'pk_toggle_multi_pk' }, 
        color: settings.multi_pk ? 'positive' : 'negative' 
      }).row()
      .textButton({ 
        label: `${settings.multi_message_count ? '‚úÖ' : '‚ùå'} –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π`, 
        payload: { command: 'pk_toggle_multi_message_count' }, 
        color: settings.multi_message_count ? 'positive' : 'negative' 
      })
      .textButton({ label: 'üîô –ù–∞–∑–∞–¥', payload: { command: 'pk_settings_back' }, color: 'secondary' }).row()
      .oneTime().inline()
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function toggleSetting(context: any, settingName: keyof PkMeterSettings) {
  const userId = context.senderId;
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const account = await prisma.account.findFirst({
      where: { idvk: userId }
    });

    if (!account) {
      await context.send(`‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const currentSettings = await getUserPkSettings(userId);
    const newValue = !currentSettings[settingName];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ upsert
    await prisma.pkMeterSettings.upsert({
      where: { id_account: account.id },
      update: { [settingName]: newValue },
      create: {
        id_account: account.id,
        single_chars: true,
        single_chars_no_spaces: true,
        single_words: true,
        single_pk: true,
        single_mb: true,
        single_sentences: true,
        single_post_percent: true,
        single_comment_percent: true,
        single_discussion_percent: true,
        multi_chars: true,
        multi_chars_no_spaces: true,
        multi_words: true,
        multi_pk: true,
        multi_mb: true,
        multi_sentences: true,
        multi_message_count: true,
        multi_sentence_count: true,
        [settingName]: newValue
      }
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º –º–µ–Ω—é –Ω–∞—Ö–æ–¥–∏–º—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
    if (settingName.startsWith('single_')) {
      await showSingleSettingsMenu(context);
    } else if (settingName.startsWith('multi_')) {
      await showMultiSettingsMenu(context);
    }
    
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${settingName}:`, error);
    await context.send(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserPkSettings(userId: number): Promise<PkMeterSettings> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const account = await prisma.account.findFirst({
      where: { idvk: userId }
    });

    if (!account) {
      return getDefaultPkSettings();
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã
    let settings = await prisma.pkMeterSettings.findUnique({
      where: { id_account: account.id }
    });
    
    if (!settings) {
      settings = await prisma.pkMeterSettings.create({
        data: {
          id_account: account.id,
          single_chars: true,
          single_chars_no_spaces: true,
          single_words: true,
          single_pk: true,
          single_mb: true,
          single_sentences: true,
          single_post_percent: true,
          single_comment_percent: true,
          single_discussion_percent: true,
          multi_chars: true,
          multi_chars_no_spaces: true,
          multi_words: true,
          multi_pk: true,
          multi_mb: true,
          multi_sentences: true,
          multi_message_count: true,
          multi_sentence_count: true,
        }
      });
    }
    
    return settings;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ö–º–µ—Ç—Ä–∞:', error);
    return getDefaultPkSettings();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function getDefaultPkSettings(): PkMeterSettings {
  return {
    single_chars: true,
    single_chars_no_spaces: true,
    single_words: true,
    single_pk: true,
    single_mb: true,
    single_sentences: true,
    single_post_percent: true,
    single_comment_percent: true,
    single_discussion_percent: true,
    multi_chars: true,
    multi_chars_no_spaces: true,
    multi_words: true,
    multi_pk: true,
    multi_mb: true,
    multi_sentences: true,
    multi_message_count: true,
    multi_sentence_count: true,
  };
}

// –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
async function resetPkSettings(userId: number) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const account = await prisma.account.findFirst({
      where: { idvk: userId }
    });

    if (!account) {
      return;
    }

    await prisma.pkMeterSettings.upsert({
      where: { id_account: account.id },
      update: getDefaultPkSettings(),
      create: {
        id_account: account.id,
        ...getDefaultPkSettings()
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ü–ö–º–µ—Ç—Ä–∞:', error);
    throw error;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
async function countWords(text: string) {
  return text.replace(/\s+/g, '').length;
}

async function countWords2(text: string) {
  return text.trim().split(/\s+/).filter(word => word.length > 0).length;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ü–ö–º–µ—Ç—Ä–∞
async function User_Pk_Init(context: any) {
  const id = await User_Pk_Get(context);
  if (id == null) {
    users_pk.push({
      idvk: context.senderId,
      authorTexts: new Map(),
      authorMessageCounts: new Map(),
      authorSentenceCounts: new Map(),
      mode: false,
      text: ''
    });
  }
}

async function User_Pk_Get(context: any) {
  for (let i = 0; i < users_pk.length; i++) {
    if (users_pk[i].idvk == context.senderId) {
      return i;
    }
  }
  return null;
}

export { users_pk };
